
import System_Param_Gen
import time
import pickle
import sys




'''
------------相关参数、数据信息------------
****每个感知用户的加法扰动结果、乘法扰动
'''
#用户数量依次设置为5、6、7、8、9、10
U_ID = [1,2,3,4,5]
Mission = [1,2,3,4,5]
USER_NUM = 5
TASK_NUM = 25

#素数群
q = 115792089237316195423570985008687907852837564279074904382605163141518161494337

#每个用户的M_k2

with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Ring_Signature_TD\数据\M_k2.txt","rb") as file:
    Serialized_M_k2 = file.read()
M_k2 = pickle.loads(Serialized_M_k2)

#每个用户的beta_k

beta_k = [[28980071573958870104037448878024028088160745280007090543572922948399743223574, 
          33139158635280479122274132831031359665113727632219694222950788328085693181410, 
          113816394004688601150528090287525212800032701712922521551766913094553835528223, 
          65594187901183430241063731711970678217864934574787255973595560011488206767343, 
          109252183464698737078048216856005366090937751419708158368495792126034518534683,
          
          28980071573958870104037448878024028088160745280007090543572922948399743223574, 
          33139158635280479122274132831031359665113727632219694222950788328085693181410, 
          113816394004688601150528090287525212800032701712922521551766913094553835528223, 
          65594187901183430241063731711970678217864934574787255973595560011488206767343, 
          109252183464698737078048216856005366090937751419708158368495792126034518534683,
          
          28980071573958870104037448878024028088160745280007090543572922948399743223574, 
          33139158635280479122274132831031359665113727632219694222950788328085693181410, 
          113816394004688601150528090287525212800032701712922521551766913094553835528223, 
          65594187901183430241063731711970678217864934574787255973595560011488206767343, 
          109252183464698737078048216856005366090937751419708158368495792126034518534683,
          
          28980071573958870104037448878024028088160745280007090543572922948399743223574, 
          33139158635280479122274132831031359665113727632219694222950788328085693181410, 
          113816394004688601150528090287525212800032701712922521551766913094553835528223, 
          65594187901183430241063731711970678217864934574787255973595560011488206767343, 
          109252183464698737078048216856005366090937751419708158368495792126034518534683,
          
          28980071573958870104037448878024028088160745280007090543572922948399743223574, 
          33139158635280479122274132831031359665113727632219694222950788328085693181410, 
          113816394004688601150528090287525212800032701712922521551766913094553835528223, 
          65594187901183430241063731711970678217864934574787255973595560011488206767343, 
          109252183464698737078048216856005366090937751419708158368495792126034518534683],
          
          [87468985639193200204652382776922455155978923674257360185168157474504560858263, 
          80166940359038904135528364952651696443381543854342527267691091996323672605115, 
          20206416421525942267390070576557872171492087098762772930928381493146603982273, 
          64264579778530331717156201147611161587400239306171628421438811949913256582970, 
          21502485423969320067247547456603912717579681938850094861774603724058836203602,
          
          87468985639193200204652382776922455155978923674257360185168157474504560858263, 
          80166940359038904135528364952651696443381543854342527267691091996323672605115, 
          20206416421525942267390070576557872171492087098762772930928381493146603982273, 
          64264579778530331717156201147611161587400239306171628421438811949913256582970, 
          21502485423969320067247547456603912717579681938850094861774603724058836203602,
          
          87468985639193200204652382776922455155978923674257360185168157474504560858263, 
          80166940359038904135528364952651696443381543854342527267691091996323672605115, 
          20206416421525942267390070576557872171492087098762772930928381493146603982273, 
          64264579778530331717156201147611161587400239306171628421438811949913256582970, 
          21502485423969320067247547456603912717579681938850094861774603724058836203602,
          
          87468985639193200204652382776922455155978923674257360185168157474504560858263, 
          80166940359038904135528364952651696443381543854342527267691091996323672605115, 
          20206416421525942267390070576557872171492087098762772930928381493146603982273, 
          64264579778530331717156201147611161587400239306171628421438811949913256582970, 
          21502485423969320067247547456603912717579681938850094861774603724058836203602,
          
          87468985639193200204652382776922455155978923674257360185168157474504560858263, 
          80166940359038904135528364952651696443381543854342527267691091996323672605115, 
          20206416421525942267390070576557872171492087098762772930928381493146603982273, 
          64264579778530331717156201147611161587400239306171628421438811949913256582970, 
          21502485423969320067247547456603912717579681938850094861774603724058836203602],
          
          [46344856186173467272898240559849920793790598949574461371906004659936266822979, 
          112140187322440122230681862095165195212844584492018656010808428299290132072623, 
          88115782566714359615439687828220094356274061224856695930760899234766818322954, 
          110789876659046408686837931351343322372925125885482045583309570965386253006211, 
          63952680364485994300203450020808374199539178352929058644228656469994458542071,
          
          46344856186173467272898240559849920793790598949574461371906004659936266822979, 
          112140187322440122230681862095165195212844584492018656010808428299290132072623, 
          88115782566714359615439687828220094356274061224856695930760899234766818322954, 
          110789876659046408686837931351343322372925125885482045583309570965386253006211, 
          63952680364485994300203450020808374199539178352929058644228656469994458542071,
          
          46344856186173467272898240559849920793790598949574461371906004659936266822979, 
          112140187322440122230681862095165195212844584492018656010808428299290132072623, 
          88115782566714359615439687828220094356274061224856695930760899234766818322954, 
          110789876659046408686837931351343322372925125885482045583309570965386253006211, 
          63952680364485994300203450020808374199539178352929058644228656469994458542071,
          
          46344856186173467272898240559849920793790598949574461371906004659936266822979, 
          112140187322440122230681862095165195212844584492018656010808428299290132072623, 
          88115782566714359615439687828220094356274061224856695930760899234766818322954, 
          110789876659046408686837931351343322372925125885482045583309570965386253006211, 
          63952680364485994300203450020808374199539178352929058644228656469994458542071,
          
          46344856186173467272898240559849920793790598949574461371906004659936266822979, 
          112140187322440122230681862095165195212844584492018656010808428299290132072623, 
          88115782566714359615439687828220094356274061224856695930760899234766818322954, 
          110789876659046408686837931351343322372925125885482045583309570965386253006211, 
          63952680364485994300203450020808374199539178352929058644228656469994458542071],
          
          [66504964718850614041704920051542305976268673419431147076004143145295262572440, 
          104149630161811114853033937900808168906595392548438125024921823912857472618006, 
          103279894290749185962022763791688315738502822151212067547591163133720161696826, 
          85418319297450639457400768279929166150558147519449379996885150505798688888557, 
          104700106344889180522738960574884169072232362553986772007002533363798823055337,
          
          66504964718850614041704920051542305976268673419431147076004143145295262572440, 
          104149630161811114853033937900808168906595392548438125024921823912857472618006, 
          103279894290749185962022763791688315738502822151212067547591163133720161696826, 
          85418319297450639457400768279929166150558147519449379996885150505798688888557, 
          104700106344889180522738960574884169072232362553986772007002533363798823055337,
          
          66504964718850614041704920051542305976268673419431147076004143145295262572440, 
          104149630161811114853033937900808168906595392548438125024921823912857472618006, 
          103279894290749185962022763791688315738502822151212067547591163133720161696826, 
          85418319297450639457400768279929166150558147519449379996885150505798688888557, 
          104700106344889180522738960574884169072232362553986772007002533363798823055337,
          
          66504964718850614041704920051542305976268673419431147076004143145295262572440, 
          104149630161811114853033937900808168906595392548438125024921823912857472618006, 
          103279894290749185962022763791688315738502822151212067547591163133720161696826, 
          85418319297450639457400768279929166150558147519449379996885150505798688888557, 
          104700106344889180522738960574884169072232362553986772007002533363798823055337,
          
          66504964718850614041704920051542305976268673419431147076004143145295262572440, 
          104149630161811114853033937900808168906595392548438125024921823912857472618006, 
          103279894290749185962022763791688315738502822151212067547591163133720161696826, 
          85418319297450639457400768279929166150558147519449379996885150505798688888557, 
          104700106344889180522738960574884169072232362553986772007002533363798823055337],
          
          [91299469577566590612718144730254116681727044002277477614703629434177433088924, 
          50892887058024657626675136424924706428542538274789976899467205399446477304139, 
          40455201460877408267539234675054112696886973918587350082220095198534183617573, 
          88533991388170759499413950010563116659633130282890565587093792389644625972193, 
          108717517998839997253439341621199086403854356722384118754707487463856226997624,
          
          91299469577566590612718144730254116681727044002277477614703629434177433088924, 
          50892887058024657626675136424924706428542538274789976899467205399446477304139, 
          40455201460877408267539234675054112696886973918587350082220095198534183617573, 
          88533991388170759499413950010563116659633130282890565587093792389644625972193, 
          108717517998839997253439341621199086403854356722384118754707487463856226997624,
          
          91299469577566590612718144730254116681727044002277477614703629434177433088924, 
          50892887058024657626675136424924706428542538274789976899467205399446477304139, 
          40455201460877408267539234675054112696886973918587350082220095198534183617573, 
          88533991388170759499413950010563116659633130282890565587093792389644625972193, 
          108717517998839997253439341621199086403854356722384118754707487463856226997624,
          
          91299469577566590612718144730254116681727044002277477614703629434177433088924, 
          50892887058024657626675136424924706428542538274789976899467205399446477304139, 
          40455201460877408267539234675054112696886973918587350082220095198534183617573, 
          88533991388170759499413950010563116659633130282890565587093792389644625972193, 
          108717517998839997253439341621199086403854356722384118754707487463856226997624,
          
          91299469577566590612718144730254116681727044002277477614703629434177433088924, 
          50892887058024657626675136424924706428542538274789976899467205399446477304139, 
          40455201460877408267539234675054112696886973918587350082220095198534183617573, 
          88533991388170759499413950010563116659633130282890565587093792389644625972193, 
          108717517998839997253439341621199086403854356722384118754707487463856226997624]]
size_beta = 0
for k in range(USER_NUM):
    for m in range(TASK_NUM):
        size_beta += sys.getsizeof(beta_k[k][m])
#初始化每个任务的真值
X_star = [5500,125,175,65,2000,5500,125,175,65,2000,5500,125,175,65,2000,5500,125,175,65,2000,5500,125,175,65,2000]

#加权扰动数据
#weight_sum,data_weighted_perbed = AS.truth_update_auxi(AS.weight_update(AS.Dist_auxi,AS.alpha_k),AS.M_k1)
#print(weight_sum,'\n',data_weighted_perbed)

'''
-----------函数实现部分------------
****签名验证辅助函数
****权值更新辅助函数
****真值更新函数
'''

def signature_veri_auxi(M_k2,beta_k):
    T_k2 = []
    for k in range(USER_NUM):
        sqli = str(M_k2[k]) + str(beta_k[k])
        T_k2.append(System_Param_Gen.hash_to_prime_group(sqli,q))
    return T_k2
'''
T_k2 = signature_veri_auxi(M_k2,beta_k)
Serialized_T_k2 = pickle.dumps(T_k2)
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Ring_Signature_TD\数据\T_k2.txt","wb") as file:
    file.write(Serialized_T_k2)
'''

#权值更新辅助函数
def weight_update_auxi(m_2,x_star):
    dist_auxi = []
    for k in range(USER_NUM):                   #计算每个用户的dist_auxi
        sub_list = []
        for m in range(TASK_NUM):                      #计算每个用户每个任务的dist_auxi
            sub_list.append(m_2[k][m]-x_star[m])
        dist_auxi.append(sub_list)
    return dist_auxi
'''
dist_auxi = weight_update_auxi(M_k2,X_star)
Serialized_dist_auxi = pickle.dumps(dist_auxi)
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Ring_Signature_TD\数据\dist_auxi.txt","wb") as file:
    file.write(Serialized_dist_auxi)
'''

#真值更新函数
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Ring_Signature_TD\数据\weight_sum.txt","rb") as file:
    Serialized_weight_sum = file.read()
weight_sum = pickle.loads(Serialized_weight_sum)
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Ring_Signature_TD\数据\data_weighted_perbed.txt","rb") as file:
    Serialized_data_weighted_perbed = file.read()
data_weighted_perbed = pickle.loads(Serialized_data_weighted_perbed)

def truth_update(w_sum,data_w_p,beta):
    
    #计算加权数据
    data_weighted = []
    for k in range(USER_NUM):
        sub_list = []
        for m in range(TASK_NUM):
            sub_list.append(data_w_p[k][m] / beta[k][m])
        data_weighted.append(sub_list)
    #print(data_weighted)

    #计算每个感知任务的真值
    x_star = []                 #本轮感知任务的真值列表
    for m in range(TASK_NUM):
        data_weighted_sum = 0
        for k in range(USER_NUM):
            data_weighted_sum += data_weighted[k][m]
        x_m_star = data_weighted_sum / w_sum
        x_star.append(int(x_m_star))
    return data_weighted,x_star

#主函数
def main():
    #t = time.perf_counter()

    T_k2 = signature_veri_auxi(M_k2,beta_k)
    print('T_k2:\n',T_k2,'\n')

    dist_auxi = weight_update_auxi(M_k2,X_star)
    print('perbed data diff:\n',dist_auxi,'\n')

    data_weighted,x_star = truth_update(weight_sum,data_weighted_perbed,beta_k)
    print(sys.getsizeof(M_k2)+size_beta+sys.getsizeof(T_k2)+sys.getsizeof(dist_auxi)+sys.getsizeof(weight_sum)+sys.getsizeof(data_weighted_perbed))
    print('weighted data:\n',data_weighted,'\n')
    print('Mission Truth:\n',x_star)
    #print(f'cost: {time.perf_counter() - t:.8f}s')

main()






 





















