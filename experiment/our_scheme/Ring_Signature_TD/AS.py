import math
import System_Param_Gen
import time
import Worker_1
import Worker_2
import Worker_3
import Worker_4
import Worker_5
import sys

from System_Param_Gen import Curve,Point

import pickle






'''
------------相关参数、数据信息------------
****TA的参数信息
****每一个感知用户的乘法扰动结果、加法扰动和环签名
****所有用户公钥
****哈希函数H0
****感知用户列表
****双线性映射
'''
#用户数量依次设置为5、6、7、8、9、10
U_ID = [1,2,3,4,5]
Mission = [1,2,3,4,5]
USER_NUM = 5
TASK_NUM = 25

#哈希的密钥
key = 111840982590485175970296538423978196999515261624746272666052161982892433726189
perb_msk = 1366540959880394786477630800712956907150468581543380023268712929519198222457055238798343962277893865770501745775184901188130983452401755417749252135509512
r_mul_V_k = System_Param_Gen.tuple_to_point((0x2c4bf02e1cdb89669e7ad680e6eee8c8771e62a3370ac399c114d22ad86412fe , 0xb26fd7f67e0739dcd352e9d38244a43608639c2105bb04b52d2ade0f968bfcb4))
mac_ta = 28455259230702036570721009769015890286866553486139650576844780394465268524979

#素数群
q = 115792089237316195423570985008687907852837564279074904382605163141518161494337

#每个用户的M_k1



M_11,M_12,U_1,V_1 = Worker_1.main()
M_21,M_22,U_2,V_2 = Worker_2.main()
M_31,M_32,U_3,V_3 = Worker_3.main()
M_41,M_42,U_4,V_4 = Worker_4.main()
M_51,M_52,U_5,V_5 = Worker_5.main()







M_k1 = [M_11,M_21,M_31,M_41,M_51]

M_k2 = [M_12,M_22,M_32,M_42,M_52]

sigma_k = [U_1,U_2,U_3,U_4,U_5]
V_k = [V_1,V_2,V_3,V_4,V_5]
'''
Serialized_M_k1 = pickle.dumps(M_k1)
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Ring_Signature_TD\数据\M_k1.txt","wb") as file:
    file.write(Serialized_M_k1)
Serialized_M_k2 =  pickle.dumps(M_k2)
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Ring_Signature_TD\数据\M_k2.txt","wb") as file:
    file.write(Serialized_M_k2)
'''

with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Ring_Signature_TD\数据\M_k1.txt","rb") as file:
    Serialized_M_k1 = file.read()
M_k1 = pickle.loads(Serialized_M_k1)

with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Ring_Signature_TD\数据\M_k2.txt","rb") as file:
    Serialized_M_k2 = file.read()
M_k2 = pickle.loads(Serialized_M_k2)






#每个用户的alpha_k

alpha_k = [[22410642974084585442191727643918586647230232556525075962101709016346283694569, 
           68574235962049804543682472313140990616965871425187131346222779247232111250905, 
           43139019699327115711617780202783040092862808628341895782744823069479854552953, 
           107077420960787047367844643446953157544199051322244644306625049394723563232185, 
           16523082419060126492750584071126670442347370916635012443244906593568651899054,

           22410642974084585442191727643918586647230232556525075962101709016346283694569, 
           68574235962049804543682472313140990616965871425187131346222779247232111250905, 
           43139019699327115711617780202783040092862808628341895782744823069479854552953, 
           107077420960787047367844643446953157544199051322244644306625049394723563232185, 
           16523082419060126492750584071126670442347370916635012443244906593568651899054,
           
           22410642974084585442191727643918586647230232556525075962101709016346283694569, 
           68574235962049804543682472313140990616965871425187131346222779247232111250905, 
           43139019699327115711617780202783040092862808628341895782744823069479854552953, 
           107077420960787047367844643446953157544199051322244644306625049394723563232185, 
           16523082419060126492750584071126670442347370916635012443244906593568651899054,
           
           22410642974084585442191727643918586647230232556525075962101709016346283694569, 
           68574235962049804543682472313140990616965871425187131346222779247232111250905, 
           43139019699327115711617780202783040092862808628341895782744823069479854552953, 
           107077420960787047367844643446953157544199051322244644306625049394723563232185, 
           16523082419060126492750584071126670442347370916635012443244906593568651899054,
           
           22410642974084585442191727643918586647230232556525075962101709016346283694569, 
           68574235962049804543682472313140990616965871425187131346222779247232111250905, 
           43139019699327115711617780202783040092862808628341895782744823069479854552953, 
           107077420960787047367844643446953157544199051322244644306625049394723563232185, 
           16523082419060126492750584071126670442347370916635012443244906593568651899054],
           
           [101695400669583813810746445139700392985776378025001584089118250770932796907834, 
           73764177157514071151095645437026121983640638485837445471844106164793206724575, 
           47612803961517067692539903164155489886296618497839475581217124605877787757442, 
           109689469928430497140731974242430685833999201365656390582176427565993107439132, 
           92925713401400710623839810079810339180963862369432977099052206202543808421338,
           
           101695400669583813810746445139700392985776378025001584089118250770932796907834, 
           73764177157514071151095645437026121983640638485837445471844106164793206724575, 
           47612803961517067692539903164155489886296618497839475581217124605877787757442, 
           109689469928430497140731974242430685833999201365656390582176427565993107439132, 
           92925713401400710623839810079810339180963862369432977099052206202543808421338,
           
           101695400669583813810746445139700392985776378025001584089118250770932796907834, 
           73764177157514071151095645437026121983640638485837445471844106164793206724575, 
           47612803961517067692539903164155489886296618497839475581217124605877787757442, 
           109689469928430497140731974242430685833999201365656390582176427565993107439132, 
           92925713401400710623839810079810339180963862369432977099052206202543808421338,
           
           101695400669583813810746445139700392985776378025001584089118250770932796907834, 
           73764177157514071151095645437026121983640638485837445471844106164793206724575, 
           47612803961517067692539903164155489886296618497839475581217124605877787757442, 
           109689469928430497140731974242430685833999201365656390582176427565993107439132, 
           92925713401400710623839810079810339180963862369432977099052206202543808421338,
           
           101695400669583813810746445139700392985776378025001584089118250770932796907834, 
           73764177157514071151095645437026121983640638485837445471844106164793206724575, 
           47612803961517067692539903164155489886296618497839475581217124605877787757442, 
           109689469928430497140731974242430685833999201365656390582176427565993107439132, 
           92925713401400710623839810079810339180963862369432977099052206202543808421338],
           
           [63522566125187066556456764927373909912726211284218421011246448508692892883960, 
           2409208470116330926832310305110493054977239499386296942801684715449791849710, 
           113517673626352500141239206018899500102813717310384125436766574738317857361980, 
           37375605603684302646951325006261092494073445795806255322644516033219539977589, 
           114880691687877779925881942767867221717253840071213558427380246744809174197327,
           
           63522566125187066556456764927373909912726211284218421011246448508692892883960, 
           2409208470116330926832310305110493054977239499386296942801684715449791849710, 
           113517673626352500141239206018899500102813717310384125436766574738317857361980, 
           37375605603684302646951325006261092494073445795806255322644516033219539977589, 
           114880691687877779925881942767867221717253840071213558427380246744809174197327,
           
           63522566125187066556456764927373909912726211284218421011246448508692892883960, 
           2409208470116330926832310305110493054977239499386296942801684715449791849710, 
           113517673626352500141239206018899500102813717310384125436766574738317857361980, 
           37375605603684302646951325006261092494073445795806255322644516033219539977589, 
           114880691687877779925881942767867221717253840071213558427380246744809174197327,
           
           63522566125187066556456764927373909912726211284218421011246448508692892883960, 
           2409208470116330926832310305110493054977239499386296942801684715449791849710, 
           113517673626352500141239206018899500102813717310384125436766574738317857361980, 
           37375605603684302646951325006261092494073445795806255322644516033219539977589, 
           114880691687877779925881942767867221717253840071213558427380246744809174197327,
           
           63522566125187066556456764927373909912726211284218421011246448508692892883960, 
           2409208470116330926832310305110493054977239499386296942801684715449791849710, 
           113517673626352500141239206018899500102813717310384125436766574738317857361980, 
           37375605603684302646951325006261092494073445795806255322644516033219539977589, 
           114880691687877779925881942767867221717253840071213558427380246744809174197327],
           
           [62312548736497453480832483456650982941473578796180777137784969230386548643384, 
           64054305960678500929777904083234938546857537972919801355215258591653013196486, 
           19835137876183337719973403408040362000981861846821393735688467352621159088332, 
           18746778741407973218597871561523148403714854963385195740040441598826397863894, 
           20201604210824322513505661740215815043165403993207115450011218751649201516349,
           
           62312548736497453480832483456650982941473578796180777137784969230386548643384, 
           64054305960678500929777904083234938546857537972919801355215258591653013196486, 
           19835137876183337719973403408040362000981861846821393735688467352621159088332, 
           18746778741407973218597871561523148403714854963385195740040441598826397863894, 
           20201604210824322513505661740215815043165403993207115450011218751649201516349,
           
           62312548736497453480832483456650982941473578796180777137784969230386548643384, 
           64054305960678500929777904083234938546857537972919801355215258591653013196486, 
           19835137876183337719973403408040362000981861846821393735688467352621159088332, 
           18746778741407973218597871561523148403714854963385195740040441598826397863894, 
           20201604210824322513505661740215815043165403993207115450011218751649201516349,
           
           62312548736497453480832483456650982941473578796180777137784969230386548643384, 
           64054305960678500929777904083234938546857537972919801355215258591653013196486, 
           19835137876183337719973403408040362000981861846821393735688467352621159088332, 
           18746778741407973218597871561523148403714854963385195740040441598826397863894, 
           20201604210824322513505661740215815043165403993207115450011218751649201516349,
           
           62312548736497453480832483456650982941473578796180777137784969230386548643384, 
           64054305960678500929777904083234938546857537972919801355215258591653013196486, 
           19835137876183337719973403408040362000981861846821393735688467352621159088332, 
           18746778741407973218597871561523148403714854963385195740040441598826397863894, 
           20201604210824322513505661740215815043165403993207115450011218751649201516349],
           
           [29570929772973349417968750706070689975526920770033625399115048062619150992298, 
           96784599580189734353569887609390758722769477223581924642005694087560629449912, 
           21077299056370535147157222341468262036561137739159405038991391911128092007265, 
           69473945125418599488020607054720093749407458904586736888715945536961994897683, 
           18773976058461958245909423671154077797152685511502714027189255601719507001640,
           
           29570929772973349417968750706070689975526920770033625399115048062619150992298, 
           96784599580189734353569887609390758722769477223581924642005694087560629449912, 
           21077299056370535147157222341468262036561137739159405038991391911128092007265, 
           69473945125418599488020607054720093749407458904586736888715945536961994897683, 
           18773976058461958245909423671154077797152685511502714027189255601719507001640,
           
           29570929772973349417968750706070689975526920770033625399115048062619150992298, 
           96784599580189734353569887609390758722769477223581924642005694087560629449912, 
           21077299056370535147157222341468262036561137739159405038991391911128092007265, 
           69473945125418599488020607054720093749407458904586736888715945536961994897683, 
           18773976058461958245909423671154077797152685511502714027189255601719507001640,
           
           29570929772973349417968750706070689975526920770033625399115048062619150992298, 
           96784599580189734353569887609390758722769477223581924642005694087560629449912, 
           21077299056370535147157222341468262036561137739159405038991391911128092007265, 
           69473945125418599488020607054720093749407458904586736888715945536961994897683, 
           18773976058461958245909423671154077797152685511502714027189255601719507001640,
           
           29570929772973349417968750706070689975526920770033625399115048062619150992298, 
           96784599580189734353569887609390758722769477223581924642005694087560629449912, 
           21077299056370535147157222341468262036561137739159405038991391911128092007265, 
           69473945125418599488020607054720093749407458904586736888715945536961994897683, 
           18773976058461958245909423671154077797152685511502714027189255601719507001640]]

size_alpha = 0
for k in range(USER_NUM):
    for m in range(TASK_NUM):
        size_alpha += sys.getsizeof(alpha_k[k][m])
#每个用户的T_k2


#公钥信息
q_id_1 = (0xfdf4907810a9f5d9462a1ae09feee5ab205d32798b0ffcc379442021f84c5bbf , 0xc891eb16b0faef4bef99ba6d522fb85470a20df730808e583778aa35c7af98f5)
q_id_2 = (0x9ebd374eea3befddf46bbb182e291fb719ee1b705b0b7802161038eb7da8a036 , 0xb96891c93bd45e9aadea192fa13f763e07dd92d70d6332edc27bbd82cfb63651)
q_id_3 = (0xb0915b333926d5338cadba614164c99be83592a13d8bdecb6f679593c11b79d8 , 0xb719cd4c14b89b533c60fd80bdb2b6cdb02b04baacf347ae779ac4f11adce08a)
q_id_4 = (0xc8c9d8dc87a7108ab52f17033c9527fb4c3f29f3f99625d43e97b702d782e41e , 0x4b854039ea48b60741608dbb7413cb98ed6e397036d0eeb7d8438b21c3255353)
q_id_5 = (0x582262c99657daf6c896580223061c97e32e52dea80b9302891418f37ffe9931 , 0x4bfe8f565e7d1dbfea68806b3bfd8144d9a24673237d1eaa89e89a9e15cf4cd1)





qid = [System_Param_Gen.tuple_to_point(q_id_1),
       System_Param_Gen.tuple_to_point(q_id_2),
       System_Param_Gen.tuple_to_point(q_id_3),
       System_Param_Gen.tuple_to_point(q_id_4),
       System_Param_Gen.tuple_to_point(q_id_5)]


#带扰动的差


'''
------------函数模块实现部分------------
****签名验证函数
****权重更新函数
****真值更新辅助函数
'''
#签名验证函数
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Ring_Signature_TD\数据\T_k2.txt","rb") as file:
    Serialized_T_k2 = file.read()
T_k2 = pickle.loads(Serialized_T_k2)

def signature_veri():
    T_k1 = []
    h = []
    for i in range(USER_NUM):
        c = str(M_k1[i]) + str(alpha_k[i])
        T_k1.append(System_Param_Gen.hash_to_prime_group(c,q))
    for k in range(USER_NUM):
        sub_list = []
        for i in range(USER_NUM):
            c = str(T_k1[k]) + str(T_k2[k]) + str(U_ID) + str(sigma_k[k][i])
            sub_list.append(System_Param_Gen.hash_to_prime_group(c,q))
        h.append(sub_list)
    veri_left = Point.infinity()
    for k in range(USER_NUM):
        for i in range(USER_NUM):
            veri_left += sigma_k[k][i] + h[k][i] * qid[i]

    r = Point.infinity()
    for k in range(USER_NUM):
        r += V_k[k]                      #****************
    veri_right = r

    print('veri_left: ',veri_left)
    print('veri_right: ',veri_right,'\n')

    mac_as = System_Param_Gen.hash_with_key(veri_right,q,key)
    #veri_right,mac_as------->TA
    #AS<-----------perb_msk,r_mul_V_k,mac_ta
    s = str(perb_msk) + str(r_mul_V_k)
    mac_ta_p = System_Param_Gen.hash_with_key(s,q,key)
    print('mac_ta: ',mac_ta)
    print('mac_ta_p: ',mac_ta_p)
    if mac_ta_p == mac_ta :
        print("TA's Hash Verify Success!\n")
        v_zuo = perb_msk * veri_left
        v_you = r_mul_V_k
        print('veri_zuo: ',v_zuo)
        print('veri_you: ',v_you)
        if v_zuo == v_you :
            print('Signature Verify Success!\n')
            return 1
        else :
            #print('Signature Verify Failed!\n')
            return -1
    else :
        #print("TA's Hash Verify Failed!")
        return -1

#权值更新


with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Ring_Signature_TD\数据\dist_auxi.txt","rb") as file:
    Serialized_dist_auxi = file.read()
dist_auxi = pickle.loads(Serialized_dist_auxi)
def weight_update(dist_auxi,alpha):
    #计算x_m_k - x_m_*
    percedata_sub_groundata = []
    for k in range(USER_NUM):
        sub_list = []
        for m in range(TASK_NUM):
            sub_list.append(dist_auxi[k][m] - alpha[k][m])
        percedata_sub_groundata.append(sub_list)
        
    #计算每个感知用户对于每个任务数据的距离和
    dist_workersum = []                #每个用户的距离和
    for k in range(USER_NUM):
        tmp = 0
        for m in range(TASK_NUM):
            tmp += percedata_sub_groundata[k][m] ** 2
        dist_workersum.append(tmp)
    
    #开始更新每个用户的权值
    dist_sum = 0                                #所有用户的距离和
    weight = []
    for k in range(USER_NUM):
        dist_sum += dist_workersum[k]   
    for k in range(USER_NUM):
        weight.append(math.log2((dist_sum / dist_workersum[k])))
    return weight

#真值更新辅助函数
def truth_update_auxi(weight,m_1):
    data_weighted_perbed = []
    
    #求所有感知用户的权值之和
    weight_sum = 0
    for k in range(USER_NUM):
        weight_sum += weight[k]

    #求带扰动的带权数据
    for k in range(USER_NUM):
        sub_list = []
        for m in range(TASK_NUM):    
            sub_list.append(weight[k] * m_1[k][m])
        data_weighted_perbed.append(sub_list)

    return weight_sum,data_weighted_perbed
'''
wight = weight_update(dist_auxi,alpha_k)
weight_sum,data_weighted_perbed = truth_update_auxi(wight,M_k1)
Serialized_weight_sum = pickle.dumps(weight_sum)
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Ring_Signature_TD\数据\weight_sum.txt","wb") as file:
    file.write(Serialized_weight_sum)
Serialized_data_weighted_perbed = pickle.dumps(data_weighted_perbed)
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Ring_Signature_TD\数据\data_weighted_perbed.txt","wb") as file:
    file.write(Serialized_data_weighted_perbed)
'''

#主函数
def main():
    #t = time.perf_counter()
    signature_veri()
    weight = weight_update(dist_auxi,alpha_k)
    print(weight)
    weight_sum,data_weighted_perbed = truth_update_auxi(weight,M_k1)
    #print(f'cost: {time.perf_counter() - t:.8f}s')
    print(sys.getsizeof(U_1)+sys.getsizeof(V_1)+
          sys.getsizeof(U_2)+sys.getsizeof(V_2)+
          sys.getsizeof(U_3)+sys.getsizeof(V_3)+
          sys.getsizeof(U_4)+sys.getsizeof(V_4)+
          sys.getsizeof(U_5)+sys.getsizeof(V_5)+
          size_alpha+sys.getsizeof(M_k1)+sys.getsizeof(T_k2)+sys.getsizeof(dist_auxi)+sys.getsizeof(weight_sum)+sys.getsizeof(data_weighted_perbed))
    print('weight sum of all workers: ',weight_sum)
    print('weighted perbed data: ',data_weighted_perbed)
main()



















