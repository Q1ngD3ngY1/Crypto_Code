import gmpy2 as gy
import pickle
import System_Params
import time
import Worker_1
import Worker_2
import Worker_3
import Worker_4
import Worker_5
import Worker_6
import Worker_7
import Worker_8
import Worker_9
import Worker_10
import sys

'''-----------------------------------数据参数部分-----------------------------------'''
N = System_Params.N

U_ID = [1,2,3,4,5]
Mission = [1,2,3,4,5]

USER_NUM = 5
TASK_NUM = 25

N = System_Params.N

#用户的公钥
public_key = [Worker_1.public_key,Worker_2.public_key,Worker_3.public_key,Worker_4.public_key,Worker_5.public_key,
              Worker_6.public_key,Worker_7.public_key,Worker_8.public_key,Worker_9.public_key,Worker_10.public_key]

#扰动后的数据
perbed_data = [[-22410642974084585442191727643918586647230232556525075962101709016346283690569, -68574235962049804543682472313140990616965871425187131346222779247232111250780, -43139019699327115711617780202783040092862808628341895782744823069479854552779, -107077420960787047367844643446953157544199051322244644306625049394723563232109, -16523082419060126492750584071126670442347370916635012443244906593568651897054, -110438586017209887450179280829459401688087231643490099920795265644044261928511, -37105307030537039988022678537085291452325031359526329807537776969528831686300, -92938117346403131611721061906191193208723286610021864092519917726021443176553, -69096111760705943573314622999192185604939082041890480984362075605583421228056, -88282543211063824032235398553655229577400976826817027034777851470278982527952, -100341745270499415663311873233218231670242647660264075745506770088471842504802, -89488274603804225389171841939230219448895365434485275894237396301495518554590, -76569347923444256958023287141542497510825013650419953885226359615086761829170, -81563584870525250942043937695609098622088217936406627218564791286200545169558, -5172851674036880809927411127200479633491103025233884330385647373127239360761, -27028946396447814017188389527013970519524088371669835359929995423985710172660, -91425191432345758752664578760387393279775536730989321983648985485050233077048, -37106632025601916820095524384718640277484166308753206283110705565223659864951, -95633630757091468057553366794189296457777722005165038765088393126665176601552, -21700321939992927803622029800518580659321319021907177209646572761251239205312, -80585351183873771092133446128001575555019360163939149939501448705632125866581, -32150157806281034227017859035132326258872818815410174001041145461220116762944, -100722857505322115198146208499220022084625070052526878791255362854105394503595, -106469741797494909039100335847700627678282797337420882550664990385374013346638, -7132804278995491665647913004073727223071894218922464596426342408363848449982],
               [-101695400669583813810746445139700392985776378025001584089118250770932796902963, -73764177157514071151095645437026121983640638485837445471844106164793206724452, -47612803961517067692539903164155489886296618497839475581217124605877787757262, -109689469928430497140731974242430685833999201365656390582176427565993107439052, -92925713401400710623839810079810339180963862369432977099052206202543808419600, -94752408506926225570773195019809612845214636045571337885576118785662754990320, -11687759206386098973763929965057896084026776161639951755404541571829414014588, -98101203433084520088882495036948260163306830748215934614306663021376543883295, -38102405711692653302023266297565313745133299659810858812425357382507365915935, -31351092313530085678216533906886348462184720764998204665947362730103914948121, -108256217076716964109438974786351886511253564069794761574328767752766679457256, -15304140838687734950794851206661960290863334014419538915774100706533318132672, -82709072283389713644412475662681448886797588096875278710224629168018261066540, -49200972638354163255526323479406776255588449968070470863452160171711604144189, -53974289389691794263604396858473687710078884961553653095054485268083791770107, -64169344959044255051216342262515258231712726509616860542953998077159862367155, -28848551368724471150105066536199026936530435177406936086517386084231870534613, -104291015502183623363523952253866990437044158889510055157230242566028625067309, -74472569422699238850867629393141696075870640202705343764051579995959485140151, -87929536507094745589093662126427758521580752170605256266333061522368949808724, -20104728617112084322057533231445223761718071244927479043679395685789025297305, -27432095162820795694090765961559759463694798565217005397503632817791681429952, -81391314733886202614293787929560138195007878203908655329116964820273868519742, -28130529658036641371124331944806630207247126504233319689450121382996670420147, -62755672704738825954244685788727478461029435805923521444111995765377310085335],
               [-63522566125187066556456764927373909912726211284218421011246448508692892873960, -2409208470116330926832310305110493054977239499386296942801684715449791849580, -113517673626352500141239206018899500102813717310384125436766574738317857361804, -37375605603684302646951325006261092494073445795806255322644516033219539977519, -114880691687877779925881942767867221717253840071213558427380246744809174194327, -84878454492724156890692473022429866562587303151891578646443325256602367485224, -67024982683209163298112781081260983328866515074189854734106041088856750535011, -67289251102924369279640193706011109182492780977246632604738600725897862219222, -74196539734949063251218316599835010573375781780263598725419279417497802533984, -103035491321492063319453715640408659864141100610171689748449197739872601791110, -90468123390936450218751360341074407346719736675459673081694357179611083284349, -12645883548661052429366963825503463912100475287103875168310940608683743678855, -17298584378449003517657383131516981400781260800849789598882870708642262049651, -43382465159345818425240719488884371862837229205349249451686248003358123837386, -17184333231159541990979421720429162150860787751672433060683713089622164358599, -85905751912688945868853775351961027511796643417968681044297406470778836062369, -19619616534082545084214763288212327890201965937902651745172989752864033121968, -114305034837722378806922303182706642796704007694086261734007555841314998869929, -8422065751024866048555214560733396657858664308813983159970831314881993019919, -8836390970673200634276966705240403261784075441204861842087577814133831788933, -103507277130645535632340892873715688492558113369849538491885677887520815177350, -105903851261146464135007034839760600071766339923319447722063319628668732286356, -3531388289266480766159286474225379969772569353527015040202934539198940813915, -109244683812902017961152300713558847361321765683346399206490596089519054694924, -80646533880311748120991725407185450632278907506741867369289780744460131674697],
               [-62312548736497453480832483456650982941473578796180777137784969230386548636384, -64054305960678500929777904083234938546857537972919801355215258591653013196366, -19835137876183337719973403408040362000981861846821393735688467352621159088162, -18746778741407973218597871561523148403714854963385195740040441598826397863844, -20201604210824322513505661740215815043165403993207115450011218751649201514849, -64319489048851532324315809274443245173568580931292578187609709518888738180870, -620267293515310378993121861842067004658214255791393188911110141928357728492, -57023193989683568739739210752361669886131873467621867845039573332943843441433, -61027345843942352680394957511608347626515939164221885864145658716321325519432, -83631467916978131746624347080935479606668223724092145157878977175481292577988, -22037356287626745871116693210555756919633900699463377968475849850058340850595, -18334091981503713155729934834883289317573282149971450923858818979598056599202, -49269437468813983047081226226091137550704036343955284499107912240345111631649, -54376632048783410629814523980574571839627098984960515857200193816661241742187, -49861947272056015851262483357533431094963170070307377274120593412604982588444, -59570315619285524355161408054244783400615402874492318919035157314876545023340, -108602451419317669571952729883991649762906668358612057736500138982476378807761, -15717803621597238813882976860792998177866559512791183131364307211176761506107, -14806996796080182058714852933734629420562453438498102625470459212135803144957, -21680531120567186364718496668574544777053950241190992174088527362220115858353, -53029544691914849058124010578912914260743308079462334553285570880688045930245, -86764537489341688819291702176868549487763773098877307030064773880241424768788, -23782076011164775602175793990786267142160872976126844175826609624016503012415, -99785974651708646840724572210778256755713177707187843043600802208027713095596, -92568377035646159171159644180226485180861997917454332207899427138690918536158],
               [-29570929772973349417968750706070689975526920770033625399115048062619150985108, -96784599580189734353569887609390758722769477223581924642005694087560629449785, -21077299056370535147157222341468262036561137739159405038991391911128092007075, -69473945125418599488020607054720093749407458904586736888715945536961994897608, -18773976058461958245909423671154077797152685511502714027189255601719507000140, -112265350327667086632380828459338610940626952394519975816205523170426940294031, -77803259844244377303300044348458411991845686083987620490483659183817018640744, -24645123421264148108663584292455374553896187467281258803011903031732951539610, -96249396594326154538609843166223288674525681265613042993829035820462274065798, -13641164048590688726734553679618933956098673128725974689572890788785899024727, -109231735584107987188923530943702254175415289578618550755335291484270100956178, -20588343665560642564581195412616014031907293933355100758715414611883462641842, -20521122663434957567991681147800704187752729568132117053456637904460773644812, -62468329757496509111280450036672510906602718638486390633937536932438197979448, -51448316374913558982100130149747296397559570961442790387524689919729616541545, -624647904842078174810106640583240736192976270186107800573619575203344744377, -58897475872112413428993391419928368160022660146520082240028140408498044116941, -115555873792869539907133670369201900730144823147009335351833001238284493146269, -19273794077020196281413933299689680098970565704088413774174798948095092028763, -31360016255940157391110058219506108276482320611913146486151374127144610943903, -31328036475983122519042329271147709268087343980682625161263317021837605818180, -28797444336888695224762439752444085477976508596765916191942265006134104652545, -16038810261442278228267248924704644020737335911978411501106645664337795646682, -94438980322764661753211195484091035135097567014217765514687464369022793039102, -19688935691509082282226516854812935938009654244821277242053025024618421002212]
               ]
size_pd = 0
for k in range(USER_NUM):
    for m in range(TASK_NUM):
        size_pd += sys.getsizeof(perbed_data[k][m])
'''                
                [-7132786843348027683509617106225935391508638737748699303820358533878852112999, 
                 -22202262115476576703143786724310994167269882708038512642473923066476527452993, 
                 -9846327241871927141663034382109014318524218773305585705416150605338346338611, 
                 -104865901099009032230511445046932151521771363669490606038609407856879688045305, 
                 -63388054285808307401188397777640847331427019695417334808191053678473067905154],
                [-65409304011354047237186567709588712533172325026467698363593724213142926981578, 
                 -112842395804061866533073652196090434308350830110184467533442888048301276525070, 
                 -22167638407458087456909011333524897573126473603610239756816857648794079343992, 
                 -44328431963488937666383030730779073358015421103939273396866799542612616315801, 
                 -104562966334847411476092532616950370438425171227329215456075892387002477873018],
                [-82311233059362826292536458877051790059863656700534136836280522182928647988503, 
                 -85570166055603503963241492763829970922073310076502773750400818987063390197043, 
                 -50581398802476747285065499181964945506412184399799615686276017128518175627133, 
                 -40134484064243320410604578954571590973131345465333677911899673185710823132598, 
                 -104545717417648121169975128314758727909304342625913470898014862589977113119264],
                [-48623361593403789316428535969317064530714456201628671361639035403693876570204, 
                 -80784874429251842388832045434779236362764810205959439166878424611570650297751, 
                 -58352991835940127247214466748328378337271782853490820375504749954439872709144, 
                 -10827998448947705453740509451623197092332146734030359153145444172475834481349, 
                 -42206922366291643865051189848072143512302276533955325280189998516140809920859],
                [-55938223678457320586225977217529546577844133102439334408923560983580220513473, 
                 -2848921631326935200510353395593829839243358619998526618662089992347765320124, 
                 -59698045928224943307611385018635183240445175697043564943040187109900517325238, 
                 -101453691664314943360165983077445994137973893060623835039764909777617875231974, 
                 -58318025073374684892780175626710443450628931464012007176340940024729693375097]
'''
#初始真值
X_star = [5500,125,175,65,2000]


#密文等数据
'''
ct1_1,ct2_1,e_1,V1_1,V2_1,V3_1 = Worker_1.main()
ct1_2,ct2_2,e_2,V1_2,V2_2,V3_2 = Worker_2.main()
ct1_3,ct2_3,e_3,V1_3,V2_3,V3_3 = Worker_3.main()
ct1_4,ct2_4,e_4,V1_4,V2_4,V3_4 = Worker_4.main()
ct1_5,ct2_5,e_5,V1_5,V2_5,V3_5 = Worker_5.main()

#ct1_6,ct2_6,e_6,V1_6,V2_6,V3_6 = Worker_6.main()
#ct1_7,ct2_7,e_7,V1_7,V2_7,V3_7 = Worker_7.main()
#ct1_8,ct2_8,e_8,V1_8,V2_8,V3_8 = Worker_8.main()
#ct1_9,ct2_9,e_9,V1_9,V2_9,V3_9 = Worker_9.main()
#ct1_10,ct2_10,e_10,V1_10,V2_10,V3_10 = Worker_10.main()

ct1 = [ct1_1,ct1_2,ct1_3,ct1_4,ct1_5]
ct2 = [ct2_1,ct2_2,ct2_3,ct2_4,ct2_5]
e = [e_1,e_2,e_3,e_4,e_5]
V1 = [V1_1,V1_2,V1_3,V1_4,V1_5]
V2 = [V2_1,V2_2,V2_3,V2_4,V2_5]
V3 = [V3_1,V3_2,V3_3,V3_4,V3_5]

Serialized_ct1 = pickle.dumps(ct1)
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Functional_Encryption_TD\ct1.txt","wb") as file:
    file.write(Serialized_ct1)


Serialized_ct2 = pickle.dumps(ct2)
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Functional_Encryption_TD\ct2.txt","wb") as file:
    file.write(Serialized_ct2)

Serialized_e = pickle.dumps(e)
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Functional_Encryption_TD\e.txt","wb") as file:
    file.write(Serialized_e)

Serialized_V1 = pickle.dumps(V1)
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Functional_Encryption_TD\V1.txt","wb") as file:
    file.write(Serialized_V1)

Serialized_V2 = pickle.dumps(V2)
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Functional_Encryption_TD\V2.txt","wb") as file:
    file.write(Serialized_V2)

Serialized_V3 = pickle.dumps(V3)
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Functional_Encryption_TD\V3.txt","wb") as file:
    file.write(Serialized_V3)
'''


#加密数据
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Functional_Encryption_TD\ct1.txt","rb") as file:
    Serialized_ct1 = file.read()
ct1 = pickle.loads(Serialized_ct1)


with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Functional_Encryption_TD\ct2.txt","rb") as file:
    Serialized_ct2 = file.read()
ct2 = pickle.loads(Serialized_ct2)



with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Functional_Encryption_TD\e.txt","rb") as file:
    Serialized_e = file.read()
e = pickle.loads(Serialized_e)

with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Functional_Encryption_TD\V1.txt","rb") as file:
    Serialized_V1 = file.read()
V1 = pickle.loads(Serialized_V1)

with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Functional_Encryption_TD\V2.txt","rb") as file:
    Serialized_V2 = file.read()
V2 = pickle.loads(Serialized_V2)

with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Functional_Encryption_TD\V3.txt","rb") as file:
    Serialized_V3 = file.read()
V3 = pickle.loads(Serialized_V3)


'''-----------------------------------函数部分-----------------------------------'''

#零知识证明(加密密钥检验)函数
def ZKP_Verify(ct2,pk,e,v1,v2,v3):
    h1 = 1
    for m in range(TASK_NUM):
        h1 = (h1 * ct2[m]) % N**2
    s = str(h1) + str(v3)
    if System_Params.hash_to_group(s,N) == e :
        right_1 = gy.powmod(h1,e,N**2)
        left = (gy.powmod((1+N),v1,N**2) * gy.powmod(pk,v2,N**2)) % N**2
        right = right_1 * v3 % N**2
        if left == right :
            return 1
        else:
            return -1
    else:
        return -1
'''
t2 = time.perf_counter()
for k in range(USER_NUM):
    t = ZKP_Verify(ct2[k],public_key[k],e[k],V1[k],V2[k],V3[k])
    print(t)
print(f'cost: {time.perf_counter() - t2:.8f}s')
'''


#真值更新
y = [66, 133, 200, 266, 333]
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Functional_Encryption_TD\skm.txt","rb") as file:
    Serialized_sk = file.read()
sk = pickle.loads(Serialized_sk)
size_sk = 0
for m in range(TASK_NUM):
    size_sk += sys.getsizeof(sk[m])

ct1_m = []
for m in range(TASK_NUM):
    tmp_list = []
    for k in range(USER_NUM):
        tmp_list.append(ct1[k][m])
    ct1_m.append(tmp_list)

ct2_m = []
for m in range(TASK_NUM):
    tmp_list = []
    for k in range(USER_NUM):
        tmp_list.append(ct2[k][m])
    ct2_m.append(tmp_list)

def truth_update():
    truth = []
    for m in range(TASK_NUM):
        #t = time.perf_counter()
        tmp_truth_m = System_Params.FE_Decrypt(USER_NUM,ct2_m[m],y,sk[m])
        #print(f'cost: {time.perf_counter() - t:.8f}s')
        truth.append(tmp_truth_m / 1000)
    #print(truth)

    dist_auxi = []
    for k in range(USER_NUM):
        tmp_auxi = []
        for m in range(TASK_NUM):
            tmp_auxi.append(perbed_data[k][m] - truth[m])
        dist_auxi.append(tmp_auxi)
    print("dist_auxi calculated Successfully:\n")
    print(dist_auxi)
    return dist_auxi
    '''
    Serialized_dist_auxi = pickle.dumps(dist_auxi)
    with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\our_scheme\Functional_Encryption_TD\dist_auxi.txt","wb") as file:
        file.write(Serialized_dist_auxi)
    '''
#truth_update()  

#主函数
def main():
    #t = time.perf_counter()
    for k in range(USER_NUM):
        #t = time.perf_counter()
        if ZKP_Verify(ct2[k],public_key[k],e[k],V1[k],V2[k],V3[k]) == 1:
            print("%d 's Functional Encryption key is Correct!"%(k+1))
            
        else:
            print("%d 's Functional Encryption key is Error!"%(k+1))
        #print(f'cost: {time.perf_counter() - t:.8f}s')
    dist_auxi = truth_update()
    print(sys.getsizeof(size_pd)+sys.getsizeof(ct1_m)+sys.getsizeof(ct2_m)+size_sk+
          sys.getsizeof(e[0])+sys.getsizeof(V1[0])+sys.getsizeof(V2[0])+sys.getsizeof(V3[0])+
          sys.getsizeof(e[1])+sys.getsizeof(V1[1])+sys.getsizeof(V2[1])+sys.getsizeof(V3[1])+
          sys.getsizeof(e[2])+sys.getsizeof(V1[2])+sys.getsizeof(V2[2])+sys.getsizeof(V3[2])+
          sys.getsizeof(e[3])+sys.getsizeof(V1[3])+sys.getsizeof(V2[3])+sys.getsizeof(V3[3])+
          sys.getsizeof(e[4])+sys.getsizeof(V1[4])+sys.getsizeof(V2[4])+sys.getsizeof(V3[4])+
          sys.getsizeof(y)+sys.getsizeof(dist_auxi))
    #print(f'total cost: {time.perf_counter() - t:.8f}s')

main()







