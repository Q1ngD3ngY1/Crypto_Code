import gmpy2 as gy
import math
import numpy as np
import pickle
import System_Params

from decimal import Decimal, ROUND_DOWN


#用户的公私钥
public_key = System_Params.public_key
private_key = System_Params.private_key

N = System_Params.N

X_star = [5500,125,175,65,2000]
Ground_truth = [6610,125,175,70,1946]
USER_NUM = 10
TASK_NUM = 5

user_data = [[4000,125,174,76,2000],
             [4871,123,180,80,1738],
             [10000,130,176,70,3000],
             [7000,120,170,50,1500],
             [7190,127,190,75,1500],

             [6800,127,168,71,1960],
             [6765,123,177,73,1955],
             [7000,120,188,70,1899],
             [6500,130,175,71,1900],
             [6610,125,176,74,1950]]
task_data =[[4000, 4871, 10000, 7000, 7190, 6800, 6765, 7000, 6500, 6610], 
            [125, 123, 130, 120, 127, 127, 123, 120, 130, 125], 
            [174, 180, 176, 170, 190, 168, 177, 188, 175, 176], 
            [76, 80, 70, 50, 75, 71, 73, 70, 71, 74], 
            [2000, 1738, 3000, 1500, 1500, 1960, 1955, 1899, 1900, 1950]]


alpha = [[22410642974084585442191727643918586647230232556525075962101709016346283694569,
         68574235962049804543682472313140990616965871425187131346222779247232111250905,
         43139019699327115711617780202783040092862808628341895782744823069479854552953,
         107077420960787047367844643446953157544199051322244644306625049394723563232185,
         16523082419060126492750584071126670442347370916635012443244906593568651899054],
         [101695400669583813810746445139700392985776378025001584089118250770932796907834,
          73764177157514071151095645437026121983640638485837445471844106164793206724575,
          47612803961517067692539903164155489886296618497839475581217124605877787757442,
          109689469928430497140731974242430685833999201365656390582176427565993107439132,
          92925713401400710623839810079810339180963862369432977099052206202543808421338],
         [63522566125187066556456764927373909912726211284218421011246448508692892883960,
          2409208470116330926832310305110493054977239499386296942801684715449791849710,
          113517673626352500141239206018899500102813717310384125436766574738317857361980,
          37375605603684302646951325006261092494073445795806255322644516033219539977589,
          114880691687877779925881942767867221717253840071213558427380246744809174197327],
         [62312548736497453480832483456650982941473578796180777137784969230386548643384,
          64054305960678500929777904083234938546857537972919801355215258591653013196486,
          19835137876183337719973403408040362000981861846821393735688467352621159088332,
          18746778741407973218597871561523148403714854963385195740040441598826397863894,
          20201604210824322513505661740215815043165403993207115450011218751649201516349],
         [29570929772973349417968750706070689975526920770033625399115048062619150992298,
          96784599580189734353569887609390758722769477223581924642005694087560629449912,
          21077299056370535147157222341468262036561137739159405038991391911128092007265,
          69473945125418599488020607054720093749407458904586736888715945536961994897683,
          18773976058461958245909423671154077797152685511502714027189255601719507001640],

         [7132786843348027683509617106225935391508638737748699303820358533878852119799,
          22202262115476576703143786724310994167269882708038512642473923066476527453120,
          9846327241871927141663034382109014318524218773305585705416150605338346338779,
          104865901099009032230511445046932151521771363669490606038609407856879688045376,
          63388054285808307401188397777640847331427019695417334808191053678473067907114],
         [65409304011354047237186567709588712533172325026467698363593724213142926988343,
          112842395804061866533073652196090434308350830110184467533442888048301276525193,
          22167638407458087456909011333524897573126473603610239756816857648794079344169,
          44328431963488937666383030730779073358015421103939273396866799542612616315874,
          104562966334847411476092532616950370438425171227329215456075892387002477874973],
         [82311233059362826292536458877051790059863656700534136836280522182928647995503,
          85570166055603503963241492763829970922073310076502773750400818987063390197163,
          50581398802476747285065499181964945506412184399799615686276017128518175627321,
          40134484064243320410604578954571590973131345465333677911899673185710823132668,
          104545717417648121169975128314758727909304342625913470898014862589977113121163],
         [48623361593403789316428535969317064530714456201628671361639035403693876576704,
          80784874429251842388832045434779236362764810205959439166878424611570650297881,
          58352991835940127247214466748328378337271782853490820375504749954439872709319,
          10827998448947705453740509451623197092332146734030359153145444172475834481420,
          42206922366291643865051189848072143512302276533955325280189998516140809922759],
         [55938223678457320586225977217529546577844133102439334408923560983580220520083,
          2848921631326935200510353395593829839243358619998526618662089992347765320249,
          59698045928224943307611385018635183240445175697043564943040187109900517325414,
          101453691664314943360165983077445994137973893060623835039764909777617875232048,
          58318025073374684892780175626710443450628931464012007176340940024729693377047]]

perbed_data = [[-22410642974084585442191727643918586647230232556525075962101709016346283690569,
                -68574235962049804543682472313140990616965871425187131346222779247232111250780,
                -43139019699327115711617780202783040092862808628341895782744823069479854552779,
                -107077420960787047367844643446953157544199051322244644306625049394723563232109,
                -16523082419060126492750584071126670442347370916635012443244906593568651897054],
               [-101695400669583813810746445139700392985776378025001584089118250770932796902963,
                -73764177157514071151095645437026121983640638485837445471844106164793206724452,
                -47612803961517067692539903164155489886296618497839475581217124605877787757262,
                -109689469928430497140731974242430685833999201365656390582176427565993107439052,
                -92925713401400710623839810079810339180963862369432977099052206202543808419600],
               [-63522566125187066556456764927373909912726211284218421011246448508692892873960,
                -2409208470116330926832310305110493054977239499386296942801684715449791849580,
                -113517673626352500141239206018899500102813717310384125436766574738317857361804,
                -37375605603684302646951325006261092494073445795806255322644516033219539977519,
                -114880691687877779925881942767867221717253840071213558427380246744809174194327],
               [-62312548736497453480832483456650982941473578796180777137784969230386548636384,
                -64054305960678500929777904083234938546857537972919801355215258591653013196366,
                -19835137876183337719973403408040362000981861846821393735688467352621159088162,
                -18746778741407973218597871561523148403714854963385195740040441598826397863844,
                -20201604210824322513505661740215815043165403993207115450011218751649201514849],
               [-29570929772973349417968750706070689975526920770033625399115048062619150985108,
                -96784599580189734353569887609390758722769477223581924642005694087560629449785,
                -21077299056370535147157222341468262036561137739159405038991391911128092007075,
                -69473945125418599488020607054720093749407458904586736888715945536961994897608,
                -18773976058461958245909423671154077797152685511502714027189255601719507000140],
                
                [-7132786843348027683509617106225935391508638737748699303820358533878852112999, 
                 -22202262115476576703143786724310994167269882708038512642473923066476527452993, 
                 -9846327241871927141663034382109014318524218773305585705416150605338346338611, 
                 -104865901099009032230511445046932151521771363669490606038609407856879688045305, 
                 -63388054285808307401188397777640847331427019695417334808191053678473067905154],
                [-65409304011354047237186567709588712533172325026467698363593724213142926981578, 
                 -112842395804061866533073652196090434308350830110184467533442888048301276525070, 
                 -22167638407458087456909011333524897573126473603610239756816857648794079343992, 
                 -44328431963488937666383030730779073358015421103939273396866799542612616315801, 
                 -104562966334847411476092532616950370438425171227329215456075892387002477873018],
                [-82311233059362826292536458877051790059863656700534136836280522182928647988503, 
                 -85570166055603503963241492763829970922073310076502773750400818987063390197043, 
                 -50581398802476747285065499181964945506412184399799615686276017128518175627133, 
                 -40134484064243320410604578954571590973131345465333677911899673185710823132598, 
                 -104545717417648121169975128314758727909304342625913470898014862589977113119264],
                [-48623361593403789316428535969317064530714456201628671361639035403693876570204, 
                 -80784874429251842388832045434779236362764810205959439166878424611570650297751, 
                 -58352991835940127247214466748328378337271782853490820375504749954439872709144, 
                 -10827998448947705453740509451623197092332146734030359153145444172475834481349, 
                 -42206922366291643865051189848072143512302276533955325280189998516140809920859],
                [-55938223678457320586225977217529546577844133102439334408923560983580220513473, 
                 -2848921631326935200510353395593829839243358619998526618662089992347765320124, 
                 -59698045928224943307611385018635183240445175697043564943040187109900517325238, 
                 -101453691664314943360165983077445994137973893060623835039764909777617875231974, 
                 -58318025073374684892780175626710443450628931464012007176340940024729693375097]]



with open("F:\研究生论文资料\Code\experiment\our_scheme\Functional_Encryption_TD\ct1.txt","rb") as file:
    Serialized_ct1 = file.read()
ct1 = pickle.loads(Serialized_ct1)

with open("F:\研究生论文资料\Code\experiment\our_scheme\Functional_Encryption_TD\ct2.txt","rb") as file:
    Serialized_ct2 = file.read()
ct2 = pickle.loads(Serialized_ct2)
ct2_m = []
for m in range(TASK_NUM):
    tmp_list = []
    for k in range(USER_NUM):
        tmp_list.append(ct2[k][m])
    ct2_m.append(tmp_list)









'''-----------------------------------函数部分-----------------------------------'''
#生成函数解密密钥
def FE_DecryptKey_generate(weight,weight_sum):


    #生成y
    y = []
    for k in range(USER_NUM):
        y.append(int(1000 * weight[k] / weight_sum))
    
    #计算skm
    sk = []
    for m in range(TASK_NUM):
        sk_m = 1
        for k in range(USER_NUM):
            inverse = gy.invert(ct1[k][m],N**2)
            sk_m = (sk_m * gy.powmod(inverse,y[k] * private_key[k],N**2)) % N**2
        sk.append(sk_m)
    print('Function decryption key generated successfully!\n')
    return y,sk

#真值更新
def truth_update(y,sk):
    truth = []
    for m in range(TASK_NUM):
        tmp_truth_m = System_Params.FE_Decrypt(USER_NUM,ct2_m[m],y,sk[m])
        truth.append(tmp_truth_m / 1000)
    #print(truth)

    dist_auxi = []
    for k in range(USER_NUM):
        tmp_auxi = []
        for m in range(TASK_NUM):
            tmp_auxi.append(perbed_data[k][m] - truth[m])
        dist_auxi.append(tmp_auxi)
    print("dist_auxi calculated Successfully:\n")
    return truth,dist_auxi

#权值更新
def weight_update(dist_auxi):

    #计算每个用户的感知数据与真值的差
    data_sub_truth = []
    for k in range(USER_NUM):
        tmp_dst = []
        for m in range(TASK_NUM):
            tmp_dst.append(dist_auxi[k][m] + alpha[k][m])
        data_sub_truth.append(tmp_dst)
    
    #计算每个用户的距离平方和
    dist = []
    for k in range(USER_NUM):
        tmp_dist = 0
        for m in range(TASK_NUM):
            tmp_dist += data_sub_truth[k][m] ** 2
        dist.append(tmp_dist)
    sum_dist = 0
    for k in range(USER_NUM):
        sum_dist += dist[k]
    
    #更新每个用户的权值
    updated_weight = []
    for k in range(USER_NUM):
        w = math.log2(sum_dist // dist[k])
        updated_weight.append(w)
    return updated_weight

'''
#计算RMSE
def RMSE(pred,truth):
    y_pred = np.array(pred)
    y_truth = np.array(truth)
    squared_error = (y_pred - y_truth) ** 2
    rmse = np.sqrt(np.mean(squared_error))
    print(rmse/100)
    return rmse/100
'''
def RMSE(predictions, targets):
    squared_error = [(Decimal(pred) - Decimal(target)) ** 2 for pred, target in zip(predictions, targets)]
    rmse = (sum(squared_error) / Decimal(len(predictions))).sqrt()
    print(rmse/100)
    return rmse/100


#主函数
def main():
    w = [4.053828210337023, 6.329959808676942, 0.8144370371880749, 3.901744653175525, 3.588574355119819, 4.465367067921497, 4.54366733727989, 4.047240576591407, 5.209389012376964, 4.91969192118492]
    updated_truth = []
    updated_weight = w
    
    for i in range(40):
        weight_sum = 0
        for k in range(USER_NUM):
            weight_sum += updated_weight[k]
        y,sk = FE_DecryptKey_generate(updated_weight,weight_sum)
        truth,dist_auxi = truth_update(y,sk)
        uw = weight_update(dist_auxi)
        
        updated_truth = truth
        updated_weight = uw
        print("%d interation truth:"%(i+1),updated_truth)
        print("%d interation weight:"%(i+1),updated_weight)
    #print(updated_truth)
    #print(updated_weight)
    return updated_truth
updated_truth = main()
ut = [int(i) for i in updated_truth]


RMSE(ut,Ground_truth)











