import gmpy2 as gy
import System_Params
import time


'''-----------------------------------数据参数部分-----------------------------------'''
U_ID = [1,2,3,4,5]
Mission = [1,2,3,4,5]

N = System_Params.N

#感知数据
Task_data_10 = [6610,125,176,74,1950]

#扰动
alpha_10 = [55938223678457320586225977217529546577844133102439334408923560983580220520083,
          2848921631326935200510353395593829839243358619998526618662089992347765320249,
          59698045928224943307611385018635183240445175697043564943040187109900517325414,
          101453691664314943360165983077445994137973893060623835039764909777617875232048,
          58318025073374684892780175626710443450628931464012007176340940024729693377047]

#用户10的公私钥
public_key = System_Params.public_key[9]
private_key = System_Params.private_key[9]

#用于零知识证明的两个随机数
Ra_1 = gy.mpz
Ra_2 = gy.mpz














'''-----------------------------------函数部分-----------------------------------'''

#加密感知数据
def FE_Encrypt_data():
    rm = []
    ct_1 = []
    ct_2 = []
    for m in range(len(Mission)):
        r,tmp1,tmp2 = System_Params.FE_Encrypt(Task_data_10[m],public_key)
        rm.append(r)
        ct_1.append(tmp1)
        ct_2.append(tmp2)
    return rm,ct_1,ct_2

#计算零知识证明
def ZKP_generate(rm):
    V_3 = (gy.powmod((1 + N),Ra_1,N**2) * gy.powmod(public_key,Ra_2,N**2)) % N**2
    data_sum = 0
    rm_sum = 0
    for m in range(len(Mission)):
        data_sum += Task_data_10[m]
        rm_sum += rm[m]
    h1 = (gy.powmod((1 + N),data_sum,N**2) * gy.powmod(public_key,rm_sum,N**2)) % N**2
    s = str(h1) + str(V_3)
    e = System_Params.hash_to_group(s,N)
    V_1 = e * data_sum + Ra_1
    V_2 = e * rm_sum + Ra_2
    return e,V_1,V_2,V_3

#扰动数据生成
def perbed_data_generate():
    perbed_data = []
    for m in range(len(Mission)):
        perbed_data.append(Task_data_10[m] - alpha_10[m])
    return perbed_data

#主函数
def main():
    #t = time.perf_counter()
    rm,ct_1,ct_2 = FE_Encrypt_data()
    e,V_1,V_2,V_3 = ZKP_generate(rm)
    perbed_data_generate()
    #print(f'cost: {time.perf_counter() - t:.8f}s')
    return ct_1,ct_2,e,V_1,V_2,V_3
#main()