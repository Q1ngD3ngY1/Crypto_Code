import gmpy2 as gy
import random
import time
def rand_from_primegroup(q):
    number = random.randint(1,q-1)
    return number

class Paillier(object):
    def __init__(self, pubKey=None, priKey=None):
        self.pubKey = pubKey
        self.priKey = priKey
    '''该部分用来生成公私钥的,我们只用一次该部分,然后将生成的公私钥保存以长期使用
    def __gen_prime__(self, rs):
        p = gy.mpz_urandomb(rs, 3072)
        while not gy.is_prime(p):
            p += 1
        return p
    def __key_gen__(self):
        # generate random state
        while True:
            rs = gy.random_state(int(time.time()))
            p = self.__gen_prime__(rs)
            q = self.__gen_prime__(rs)
            n = p * q
            lmd = (p-1) * (q-1)
            if gy.gcd(n, lmd) == 1:
                break
        h = rand_from_primegroup(n)
        hn = gy.powmod(h,n,n**2)
        mu = gy.invert(lmd, n**2)

        self.pubKey = [n, hn]
        self.priKey = [lmd, mu]
        return self.pubKey,self.priKey
    '''
    def decipher(self, ciphertext,n,lmd,mu):
        #n, hn = self.pubKey
        #lmd, mu = self.priKey
        m = ((gy.powmod(ciphertext,lmd,n**2))) % n**2 - 1
        plaintext = (((m * mu) % n**2) // n) % n**2
        return plaintext

    def encipher(self, plaintext,n,hn):
        #n, hn = self.pubKey
        r = gy.mpz_random(gy.random_state(int(time.time())), n**2)
        while gy.gcd(n, r)  != 1:
            r += 1
        ciphertext = gy.powmod((1 + plaintext * n),1 , n ** 2) * gy.powmod(hn, r, n ** 2) % (n ** 2)
        return ciphertext
    def __add_ciphertexts__(self,c1,c2,n):
        #n,hn = self.pubKey
        c = (c1 * c2) % (n**2)
        return c
    def __subtract_ciphertexts__(self, c1, c2, n):
        # 使用 gmpy2.invert() 计算 c2 的模反元素
        c2_inverse = gy.invert(c2, n**2)
        c = (c1 * c2_inverse) % (n ** 2)
        return c
    def homomorphic_addition(self,c1,c2,n):
        c = self.__add_ciphertexts__(c1,c2,n)
        return c
    '''
    def scalar_exponentiation(self, ciphertext, scalar,n):
        if scalar == 0:
            return 1
        c = ciphertext
        if scalar >= 0 :
            for i in range(scalar - 1):
                c = self.__add_ciphertexts__(c, ciphertext,n)
        else :
            c_neg = gy.invert(c,n**2)
            scalar_abs = abs(scalar)
            for i in range(scalar_abs - 1):
                c_neg = self.__subtract_ciphertexts__(c_neg,ciphertext,n)
            c = c_neg
        #if scalar < 0:
            #c = gy.invert(c,n**2)
        return c
    '''
    def scalar_exponentiation(self, ciphertext, scalar,n):
        if scalar == 0:
            return 1
        c = ciphertext
        scalar_abs = abs(scalar)
        for i in range(scalar_abs - 1):
            c = self.__add_ciphertexts__(c, ciphertext,n)
        return c
pai = Paillier()
#pub,pri = pai.__key_gen__()

#print('public:',pub,'\n')
#print('private:',pri,'\n')
public_key =  [(3214739977618190141841381315424160857236346050316978496184064943302576336162148587164228501942317798174516556288454522004511025770766814000058374019396732989620469178129861727939744773047755036623529724124461502310854741237396074116471581520236409981802383152617296312463349538796570686916183194036712286864648175060343553300424928071890255163048954610990847312595120618492322050082343574441164065708868273385711203960518606216328847706525381883796382388095901169348495073909188915931736734242648643580146716503473960688079831325016386161321529439042790226766074370850800618535603691030210043227408977033873669349836685260620512924088704561448732426550792312190671858306138458468909033902074944638676337881733695960692598981934698885000110883963925682913429564585610961456888503760060644426428866623266713480999498848839647950424567923359334655978630835642355602809831061916919524253801682138469398293382642400907525003391835889621945013299187364485142082609123588133518730740316611467625143253961154669749099303611195866038596741457126150788237445743138537386080332429692180085104670960833018677772808328183516597925512921746715887605489846072669449475640480660766422662720915182554429776035354600399166505004324126676065417695464819858483935389297361511011124878907345472289440654077689552509629438624672295963239360419612854947084273691941979453001383030920556551324728697923231114689602364966391236759000806535439950806287399610773050881072674070471279260490091827081057361623399686817243775354180001319443472562585921350225523981821282159274993908311221616437696959048826937575522470958701889578717482111116002508191231728162728879346210262412842916795485066939629400761847781761960871744251598723034152547227109575229660110959863529729160992786329396406628511859137876582721478288090944887571785945235933240890064034825688542881461477767735591), (7625926741465401559470956377306887928165456101249241113263843817839543142754134810999007167707994368400741041590649324237052253328579060409730648345135615755405656519001335802626597873986820350712487745921136797591203782837098239988522627219672304983596830366436066084133161173081107983797299714088128966983461011703046458182390353423115432555030443565955342667108463633342111364459139135990166413658920004745072718349815062583090952710736136978145213525908453439474862542372032049160764387079047270538915907507590051499420959866396121487084594789048885351734895218165167687243936893940817424646273843842948619237988570190829177981706467976298557971577404967804484736849122492733567480029216596035391836604154680915190206404871307154963856134204505042504048534311426891245331137420662715420928030057870322802792368752661417724924542425078137294398862784139132792061034633427680257621761009039092816720710139645984239451818864925998007573310310488433014889403248395694732477623805580340006614985667887318632782375285722942212725165629210473895185356134488368566568554077532741498616720792942936147843393642145985222567173068943819003678627749517382791585830562200567842933938431551236201758651759565445539739793597170761745144230532146532984602236494363113046601318232120956919650576845633874309797032698119936298513863913995034119455455076553417755794002803224375231058510476763408484785228042730121642866703262194876819501717282273737358500528856888839090636878611581847346880788282901500080656863103612149770764954146464131917826834314581265060840919919628237207182825243175673082660750237826521589976092721958693928134837874075053684299504781172737044695073101392292556257695601317896320000868661269478437681231153577912244301370673406342780203762513627070924923019823281553315877513957195974756213363969038514096879290695125924252592336743684639790487258737933469378570630183725812712424445063177144658356036068611127294110761435155194723172054981649614881765320334912966566259801312925713009378931303448111449783122979349583425084097910389316001279026377085992082417879484869840938015662789222210356190855558380196824281119378048451862436783447081201896034618079274393037540026725076872959202759742305787624557887582458206665022278165233282779825469400926300822657206030006952987088771820912296946096761477837201425056482561909104003491517029000238483232024789619887000258639150606063674243560837993206338694745493448149458080642635476569941923659042679844481152400286313028895011923328811188544545132996912340968709734496335675339023666816356762413180316185962633310463861037572509523274170942716272695410375491752722360895219348077124715127624541725554142259982428173023070210746514053157617951417751782606745002303547221761771443854683107049008205107759620287982649983595806471713457883669173150824228987833136112767343773380412981683324320067504519623313044915135594172090573358906067264358435336596136784845129639205440526074500387049014675168846269778688942689697465867970473854640240493223083672355078692109117804643011026944357991982861312928982401001103543021716079067277522213617855426722842532940090022056714820975638014971321291411692996246107893299809207093235503476392655344462957337540635790000171286632836271373014737633118708638711642912351619298044366995750643328491003529434467759818778097014542652130177520757878304082492226626130172930076741663338020711144828112933968586673041799619700434168908060136344604072900154818284208447399384261327148749109945824917708263499243249662617815078335973631888255608480499262559728964403052765076924142693598308455295849327132241752934652522756361988181026444096062650777454711065339758845874582309184772063520831514299092120561140589)]
private_key = [(3214739977618190141841381315424160857236346050316978496184064943302576336162148587164228501942317798174516556288454522004511025770766814000058374019396732989620469178129861727939744773047755036623529724124461502310854741237396074116471581520236409981802383152617296312463349538796570686916183194036712286864648175060343553300424928071890255163048954610990847312595120618492322050082343574441164065708868273385711203960518606216328847706525381883796382388095901169348495073909188915931736734242648643580146716503473960688079831325016386161321529439042790226766074370850800618535603691030210043227408977033873669349836685260620512924088704561448732426550792312190671858306138458468909033902074944638676337881733695960692598981934698885000110883963925682913429564585610961456888503760060644426428866623266713480999498848839647950424567923359334655978630835642355602809831061916919524253801682138469398293382642400907525003391830562424420487021247165981602694616923037151627525772146005826712912984788727694646265924527293682079959595148538075381329721946376939817767722525310606509482228504965866795031948406736636169310288572405626779710783237420696268392708406954808974374705297879939676004669144755043402184256126697690258764427200734933752461117113357252619099062654083545838699434723605577344532189815262813986206643621655796964348313061326018067421499845795703597345317176465217165658169304491025526346870060089908541490334975981504536638965113055526185630204211111919918989156458091002417076099316264239987560066864384061756416772369346874580177182440590222261864318464518359703088226715479213575898347048098504143904454279865565459554894489433237909364778190970157253657494143712097089674123652616479185663075321388254953221324090745137196724645918351439487643938204761400730263092547811111040391890215017705756915732122293261412171036486918400), (1195567088960678619173160178270828050789016192388263743771941425459228103445546841051153975428508892344172871191749350498152217976241839708190199455204657211878258191633026603165573057388819967735305472212670682559971376020080536843066734134955963904496091911023814331266621081563274812863512694686730571378808200454100439546981073740019989022062445308270668151549640412481652179983494384112902402311702988173765884851256217188231318957817958998344325319706482738961631652433312724646994283303692191999243309889445780960438754815364331749121059806339815575536399727510584957008813449740950524079273130227615485764385580795790103478022433990556991923759625013139711296844989183840536895465854653815034507531610341981220713724151323738045130494396218377971202949110451590089281417580991674075511367986000523804173056292453937498601100990380421596731041718033449830367143520980506819369434164886054894430350617017129248685086864430941904145723103950524792726336930221060497109845505370265361718271884683223534098688373856702319590964613141702103377734994669430597281847177216379629701144812890020660949403172907030657408105772140067002858296562349368838243562615744920322080677885224557269776165507764022121498918960978144292583392539076610872476412770904840788457348748344025461688663395050374667563871705747012349591022007871277194348473376213249565096178988573933879518655319816403609377717100438219146600070634878857022584882572466307033486880291195532354259820251164821089255644174012380837253053261432394415214976245248538808117851412170442279406863761917168288036191558452242935310932931554825223771519295546074419851628082776599835610769622016955871420939926468757492638435917432998019328018342094421318496542729117875368484840565264098325809300196949659762083102046663583882318583036853282027009532737385169464745963398170722572988609941843513667981322212127652688262018887877747499429673371555124904898525668319644930897410355154877173705733073958932468705874704977653329684867990749851873701534587257065711150011149816384090676664560195938057159505095077595053979166840670702044539935953325463393582692560626759032684553112226299756763628008135254079183638956390012595977985631600003201909210317678280208542801804079894845708381066442407568886345410290139649246982482044822181259414759989881968754675879936950664160387283297146584482601930619962977724663518597922811638664200999483863534520986714433421211570196354187986527340834979311308017255864150174147039648703787083708819433215351408118849690328369300963411439838290814439809321874911274563810689873659184937192922533364240650792458176363005433294067351436746487984191450921937427263477884551840571223559907742456830828704926760610681155416708774473789273873410476889873361464353770810806030764063481980002504382327710759649591799713755153671880627436202364565318961788396239435107584110190626764938770423540568644169688252838011291076726548170157500186915479255272387282543958276420619976030605838820384914766971173840385201623271538780611714429591010861858814355589475566678320740379152048145281667010331141963675914669607032286036254518932137222931765636312335820705149159628291755118285539707242389237801625744567811886536494341082802854857896941016423722196259861712575644087605702908777088495037185379360143324462249577485256521785810800292600217427921241513188230133751314592309193121495157005484489320375735163226741348194903162224171429967935703298832414970231371964252923756497916664898942843886903274646521492057236167362784221876699821191730040469478132987710824156060097538819072905714593041502024914557356700551462216101293031205422685644363041683664546425871105385927962052258752886885570807907972222538313909496861626)]
#t = time.perf_counter()
#c = pai.encipher(115792089237316195423570985008687907852837564279074904382605163141518161494337,public_key[0],public_key[1])
#print(f'cost: {time.perf_counter() - t:.8f}s')
#t1 = time.perf_counter()
#m = pai.decipher(c,public_key[0],private_key[0],private_key[1])
#print(f'cost1: {time.perf_counter() - t1:.8f}s')
#print(m)
#t = time.perf_counter()
#c1 = pai.scalar_exponentiation(c,30,public_key[0])
#print(f'cost: {time.perf_counter() - t:.8f}s')
#print(pai.decipher(c1,public_key[0],private_key[0],private_key[1]))
'''
c1 = pai.encipher(174,public_key[0],public_key[1])
t = time.perf_counter()
m1 = pai.scalar_exponentiation(c1,2,public_key[0])
m = pai.decipher(m1,public_key[0],private_key[0],private_key[1])
print(f'cost: {time.perf_counter() - t:.8f}s')
print(m)
'''
'''
if __name__ == "__main__":
    pai = Paillier()
    pai.__key_gen__()
    pubKey = pai.pubKey
    print("Public/Private key generated.")
    #plaintext = input("Enter your text: ")
    plaintext = 115
    print("Original text:", plaintext)
    t = time.perf_counter()
    ciphertext = pai.encipher(plaintext)
    print(f'cost: {time.perf_counter() - t:.8f}s')
    ciphertext1 = pai.encipher(2)
    print("Ciphertext:", ciphertext)
    ciphertext2 = pai.homomorphic_addition(ciphertext,ciphertext1)
    c = pai.scalar_exponentiation(ciphertext,3)
    deciphertext = pai.decipher(c)
    print("Deciphertext: ", deciphertext)
'''
