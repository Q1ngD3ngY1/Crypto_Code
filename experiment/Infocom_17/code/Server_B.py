
import pickle
import System_Params
import time
from phe import paillier
import sys





'''---------------------------------参数部分------------------------------------'''
U_ID = [1,2,3,4,5]
Mission = [1,2,3,4,5]

USER_NUM = 5
TASK_NUM = 25


alpha = [[22410642974084585442191727643918586647230232556525075962101709016346283694569, 
           68574235962049804543682472313140990616965871425187131346222779247232111250905, 
           43139019699327115711617780202783040092862808628341895782744823069479854552953, 
           107077420960787047367844643446953157544199051322244644306625049394723563232185, 
           16523082419060126492750584071126670442347370916635012443244906593568651899054,
           
           22410642974084585442191727643918586647230232556525075962101709016346283694569, 
           68574235962049804543682472313140990616965871425187131346222779247232111250905, 
           43139019699327115711617780202783040092862808628341895782744823069479854552953, 
           107077420960787047367844643446953157544199051322244644306625049394723563232185, 
           16523082419060126492750584071126670442347370916635012443244906593568651899054,
           
           22410642974084585442191727643918586647230232556525075962101709016346283694569, 
           68574235962049804543682472313140990616965871425187131346222779247232111250905, 
           43139019699327115711617780202783040092862808628341895782744823069479854552953, 
           107077420960787047367844643446953157544199051322244644306625049394723563232185, 
           16523082419060126492750584071126670442347370916635012443244906593568651899054,
           
           22410642974084585442191727643918586647230232556525075962101709016346283694569, 
           68574235962049804543682472313140990616965871425187131346222779247232111250905, 
           43139019699327115711617780202783040092862808628341895782744823069479854552953, 
           107077420960787047367844643446953157544199051322244644306625049394723563232185, 
           16523082419060126492750584071126670442347370916635012443244906593568651899054,
           
           22410642974084585442191727643918586647230232556525075962101709016346283694569, 
           68574235962049804543682472313140990616965871425187131346222779247232111250905, 
           43139019699327115711617780202783040092862808628341895782744823069479854552953, 
           107077420960787047367844643446953157544199051322244644306625049394723563232185, 
           16523082419060126492750584071126670442347370916635012443244906593568651899054],
           
           [101695400669583813810746445139700392985776378025001584089118250770932796907834, 
           73764177157514071151095645437026121983640638485837445471844106164793206724575, 
           47612803961517067692539903164155489886296618497839475581217124605877787757442, 
           109689469928430497140731974242430685833999201365656390582176427565993107439132, 
           92925713401400710623839810079810339180963862369432977099052206202543808421338,
           
           101695400669583813810746445139700392985776378025001584089118250770932796907834, 
           73764177157514071151095645437026121983640638485837445471844106164793206724575, 
           47612803961517067692539903164155489886296618497839475581217124605877787757442, 
           109689469928430497140731974242430685833999201365656390582176427565993107439132, 
           92925713401400710623839810079810339180963862369432977099052206202543808421338,
           
           101695400669583813810746445139700392985776378025001584089118250770932796907834, 
           73764177157514071151095645437026121983640638485837445471844106164793206724575, 
           47612803961517067692539903164155489886296618497839475581217124605877787757442, 
           109689469928430497140731974242430685833999201365656390582176427565993107439132, 
           92925713401400710623839810079810339180963862369432977099052206202543808421338,
           
           101695400669583813810746445139700392985776378025001584089118250770932796907834, 
           73764177157514071151095645437026121983640638485837445471844106164793206724575, 
           47612803961517067692539903164155489886296618497839475581217124605877787757442, 
           109689469928430497140731974242430685833999201365656390582176427565993107439132, 
           92925713401400710623839810079810339180963862369432977099052206202543808421338,
           
           101695400669583813810746445139700392985776378025001584089118250770932796907834, 
           73764177157514071151095645437026121983640638485837445471844106164793206724575, 
           47612803961517067692539903164155489886296618497839475581217124605877787757442, 
           109689469928430497140731974242430685833999201365656390582176427565993107439132, 
           92925713401400710623839810079810339180963862369432977099052206202543808421338],
           
           [63522566125187066556456764927373909912726211284218421011246448508692892883960, 
           2409208470116330926832310305110493054977239499386296942801684715449791849710, 
           113517673626352500141239206018899500102813717310384125436766574738317857361980, 
           37375605603684302646951325006261092494073445795806255322644516033219539977589, 
           114880691687877779925881942767867221717253840071213558427380246744809174197327,
           
           63522566125187066556456764927373909912726211284218421011246448508692892883960, 
           2409208470116330926832310305110493054977239499386296942801684715449791849710, 
           113517673626352500141239206018899500102813717310384125436766574738317857361980, 
           37375605603684302646951325006261092494073445795806255322644516033219539977589, 
           114880691687877779925881942767867221717253840071213558427380246744809174197327,
           
           63522566125187066556456764927373909912726211284218421011246448508692892883960, 
           2409208470116330926832310305110493054977239499386296942801684715449791849710, 
           113517673626352500141239206018899500102813717310384125436766574738317857361980, 
           37375605603684302646951325006261092494073445795806255322644516033219539977589, 
           114880691687877779925881942767867221717253840071213558427380246744809174197327,
           
           63522566125187066556456764927373909912726211284218421011246448508692892883960, 
           2409208470116330926832310305110493054977239499386296942801684715449791849710, 
           113517673626352500141239206018899500102813717310384125436766574738317857361980, 
           37375605603684302646951325006261092494073445795806255322644516033219539977589, 
           114880691687877779925881942767867221717253840071213558427380246744809174197327,
           
           63522566125187066556456764927373909912726211284218421011246448508692892883960, 
           2409208470116330926832310305110493054977239499386296942801684715449791849710, 
           113517673626352500141239206018899500102813717310384125436766574738317857361980, 
           37375605603684302646951325006261092494073445795806255322644516033219539977589, 
           114880691687877779925881942767867221717253840071213558427380246744809174197327],
           
           [62312548736497453480832483456650982941473578796180777137784969230386548643384, 
           64054305960678500929777904083234938546857537972919801355215258591653013196486, 
           19835137876183337719973403408040362000981861846821393735688467352621159088332, 
           18746778741407973218597871561523148403714854963385195740040441598826397863894, 
           20201604210824322513505661740215815043165403993207115450011218751649201516349,
           
           62312548736497453480832483456650982941473578796180777137784969230386548643384, 
           64054305960678500929777904083234938546857537972919801355215258591653013196486, 
           19835137876183337719973403408040362000981861846821393735688467352621159088332, 
           18746778741407973218597871561523148403714854963385195740040441598826397863894, 
           20201604210824322513505661740215815043165403993207115450011218751649201516349,
           
           62312548736497453480832483456650982941473578796180777137784969230386548643384, 
           64054305960678500929777904083234938546857537972919801355215258591653013196486, 
           19835137876183337719973403408040362000981861846821393735688467352621159088332, 
           18746778741407973218597871561523148403714854963385195740040441598826397863894, 
           20201604210824322513505661740215815043165403993207115450011218751649201516349,
           
           62312548736497453480832483456650982941473578796180777137784969230386548643384, 
           64054305960678500929777904083234938546857537972919801355215258591653013196486, 
           19835137876183337719973403408040362000981861846821393735688467352621159088332, 
           18746778741407973218597871561523148403714854963385195740040441598826397863894, 
           20201604210824322513505661740215815043165403993207115450011218751649201516349,
           
           62312548736497453480832483456650982941473578796180777137784969230386548643384, 
           64054305960678500929777904083234938546857537972919801355215258591653013196486, 
           19835137876183337719973403408040362000981861846821393735688467352621159088332, 
           18746778741407973218597871561523148403714854963385195740040441598826397863894, 
           20201604210824322513505661740215815043165403993207115450011218751649201516349],
           
           [29570929772973349417968750706070689975526920770033625399115048062619150992298, 
           96784599580189734353569887609390758722769477223581924642005694087560629449912, 
           21077299056370535147157222341468262036561137739159405038991391911128092007265, 
           69473945125418599488020607054720093749407458904586736888715945536961994897683, 
           18773976058461958245909423671154077797152685511502714027189255601719507001640,
           
           29570929772973349417968750706070689975526920770033625399115048062619150992298, 
           96784599580189734353569887609390758722769477223581924642005694087560629449912, 
           21077299056370535147157222341468262036561137739159405038991391911128092007265, 
           69473945125418599488020607054720093749407458904586736888715945536961994897683, 
           18773976058461958245909423671154077797152685511502714027189255601719507001640,
           
           29570929772973349417968750706070689975526920770033625399115048062619150992298, 
           96784599580189734353569887609390758722769477223581924642005694087560629449912, 
           21077299056370535147157222341468262036561137739159405038991391911128092007265, 
           69473945125418599488020607054720093749407458904586736888715945536961994897683, 
           18773976058461958245909423671154077797152685511502714027189255601719507001640,
           
           29570929772973349417968750706070689975526920770033625399115048062619150992298, 
           96784599580189734353569887609390758722769477223581924642005694087560629449912, 
           21077299056370535147157222341468262036561137739159405038991391911128092007265, 
           69473945125418599488020607054720093749407458904586736888715945536961994897683, 
           18773976058461958245909423671154077797152685511502714027189255601719507001640,
           
           29570929772973349417968750706070689975526920770033625399115048062619150992298, 
           96784599580189734353569887609390758722769477223581924642005694087560629449912, 
           21077299056370535147157222341468262036561137739159405038991391911128092007265, 
           69473945125418599488020607054720093749407458904586736888715945536961994897683, 
           18773976058461958245909423671154077797152685511502714027189255601719507001640]]
size_pb = 0
for k in range(USER_NUM):
    for m in range(TASK_NUM):
        size_pb += sys.getsizeof(alpha[k][m])
#服务器A的公私钥
public_key_A = System_Params.public_key_A
private_key_A = System_Params.private_key_A

#服务器B的公钥
public_key_B = System_Params.public_key_B
private_key_B = System_Params.private_key_B

'''
t = time.perf_counter()
System_Params.Paillier_Encrypt(public_key_B,alpha[0][0])
print(f'cost: {time.perf_counter() - t:.8f}s')
'''




'''---------------------------------函数部分------------------------------------'''
'''从B_DaSan_Data.txt中读取数据进行计算,并写入A_XiaoSan_Data.txt中'''

#B用自己的公钥加密每一个扰动Step Ⅳ
def B_pai_enc_perb():
    #B将加密的结果写入到A_DaSi_Data.txt中
    
    #加密
    encrypted_perb = []
    for k in range(USER_NUM):
        sub_list = []
        for m in range(TASK_NUM):
            sub_list.append(System_Params.Paillier_Encrypt(public_key_B,alpha[k][m]))
        encrypted_perb.append(sub_list)
    return encrypted_perb
    '''
    #写入A_DaSi_Data.txt中
    serialized_encrypted_perb = pickle.dumps(encrypted_perb)
    with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\Infocom_17\code\A_DaSi_Data.txt","wb") as file:
        file.write(serialized_encrypted_perb)
    '''
encrypted_perb = B_pai_enc_perb()
size_ep = 0
for k in range(USER_NUM):
    for m in range(TASK_NUM):
        size_ep += sys.getsizeof(encrypted_perb)

with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\Infocom_17\code\B_XiaoYi_Data.txt","rb") as file:
    Serialized_C_k_conti = file.read()
C_k_conti = pickle.loads(Serialized_C_k_conti)

#权重更新Step ②
def weight_update():
    #B从B_XiaoYi_Data.txt中读取加密结果并解密,然后更新权值
    with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\Infocom_17\code\B_XiaoYi_Data.txt","rb") as file:
        Serialized_C_k_conti = file.read()
    C_k_conti = pickle.loads(Serialized_C_k_conti)
    
    #解密获得每个用户扰动后的距离和
    De_C_k_conti = []
    for k in range(USER_NUM):
        #t = time.perf_counter()
        de = System_Params.Paillier_Decrypt(private_key_B,C_k_conti[k])
        #print(f'cost: {time.perf_counter() - t:.8f}s')
        De_C_k_conti.append(de)
    
    #计算每个用户的扰动的平方和
    perb_pow_sum = []
    for k in range(USER_NUM):
        tmp = 0
        for m in range(TASK_NUM):
            tmp += alpha[k][m] ** 2
        perb_pow_sum.append(tmp)
    
    #计算每个用户的距离
    dist = []
    for k in range(USER_NUM):
        dist.append(De_C_k_conti[k] + perb_pow_sum[k])
    
    #更新权值
    dist_sum = 0
    for k in range(USER_NUM):
        dist_sum += dist[k]
    weight = []
    for k in range(USER_NUM):
        weight.append(dist_sum // dist[k])
    #print(weight)

    return weight

weight = weight_update()
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\Infocom_17\code\B_DaSan_Data.txt","rb") as file:
    Serialized_encrypted_perbed_data = file.read()
encrypted_perbed_data = pickle.loads(Serialized_encrypted_perbed_data)          #加密的扰动数据
size_epd = 0
for k in range(USER_NUM):
    for m in range(TASK_NUM):
        size_epd += sys.getsizeof(encrypted_perbed_data[k][m])
#真值更新辅助函数Step ③
def truth_update_auxi(weight):
    #该函数从B_DaSan_Data.txt中读取数据进行计算,并写入A_XiaoSan_Data.txt中
    
    #对每个任务,计算pai_enc_weight * alpha
    w_alpha = []                        #对每个任务,先计算weight * alpha
    for m in range(TASK_NUM):
        tmp = 0
        for k in range(USER_NUM):
            tmp += weight[k] * alpha[k][m]
        w_alpha.append(tmp)
    
    pai_enc_w_alpha = []
    for m in range(TASK_NUM):
        pai_enc_w_alpha.append(System_Params.Paillier_Encrypt(public_key_A,w_alpha[m]))
    
    #从B_DaSan_Data.txt中读取数据
    with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\Infocom_17\code\B_DaSan_Data.txt","rb") as file:
        Serialized_encrypted_perbed_data = file.read()
    encrypted_perbed_data = pickle.loads(Serialized_encrypted_perbed_data)          #加密的扰动数据

    #计算加密的带权数据
    pai_enc_weighted_data = []
    for m in range(TASK_NUM):
        tmp_m = 0
        for k in range(USER_NUM):
            tmp = System_Params.cipher_exp(encrypted_perbed_data[k][m],weight[k])
            tmp_m = System_Params.homomorphic_add(tmp_m,tmp)
        tmp_m = System_Params.homomorphic_add(tmp_m,pai_enc_w_alpha[m])
        pai_enc_weighted_data.append(tmp_m)
    return pai_enc_weighted_data
    '''
    #写入A_XiaoSan_Data.txt中
    Serialized_pai_enc_weighted_data = pickle.dumps(pai_enc_weighted_data)
    with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\Infocom_17\code\A_XiaoSan_Data.txt","wb") as file:
        file.write(Serialized_pai_enc_weighted_data)
    weight_sum = 0
    for k in range(USER_NUM):
        weight_sum += weight[k]
    
    Serialized_weight_sum = pickle.dumps(weight_sum)
    with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\Infocom_17\code\weight_sum.txt","wb") as file:
        file.write(Serialized_weight_sum)
    '''
pai_enc_weighted_data = truth_update_auxi(weight)
size_pewd = 0
for m in range(TASK_NUM):
    size_pewd += sys.getsizeof(pai_enc_weighted_data[m])

def main():
    t = time.perf_counter()
    B_pai_enc_perb()
    weight = weight_update()
    truth_update_auxi(weight)
    print(size_pb+size_ep+sys.getsizeof(C_k_conti)+size_epd+size_pewd)
    #print(f'cost: {time.perf_counter() - t:.8f}s')

main()