import pickle
import System_Params
import time
import sys

'''---------------------------------参数部分------------------------------------'''
U_ID = [1,2,3,4,5]
Mission = [1,2,3,4,5]

USER_NUM = 5
TASK_NUM = 25


perbed_data = [[-22410642974084585442191727643918586647230232556525075962101709016346283690569,
                -68574235962049804543682472313140990616965871425187131346222779247232111250780,
                -43139019699327115711617780202783040092862808628341895782744823069479854552779,
                -107077420960787047367844643446953157544199051322244644306625049394723563232109,
                -16523082419060126492750584071126670442347370916635012443244906593568651897054,
                -22410642974084585442191727643918586647230232556525075962101709016346283690569,
                -68574235962049804543682472313140990616965871425187131346222779247232111250780,
                -43139019699327115711617780202783040092862808628341895782744823069479854552779,
                -107077420960787047367844643446953157544199051322244644306625049394723563232109,
                -16523082419060126492750584071126670442347370916635012443244906593568651897054,
                -22410642974084585442191727643918586647230232556525075962101709016346283690569,
                -68574235962049804543682472313140990616965871425187131346222779247232111250780,
                -43139019699327115711617780202783040092862808628341895782744823069479854552779,
                -107077420960787047367844643446953157544199051322244644306625049394723563232109,
                -16523082419060126492750584071126670442347370916635012443244906593568651897054,
                -22410642974084585442191727643918586647230232556525075962101709016346283690569,
                -68574235962049804543682472313140990616965871425187131346222779247232111250780,
                -43139019699327115711617780202783040092862808628341895782744823069479854552779,
                -107077420960787047367844643446953157544199051322244644306625049394723563232109,
                -16523082419060126492750584071126670442347370916635012443244906593568651897054,
                -22410642974084585442191727643918586647230232556525075962101709016346283690569,
                -68574235962049804543682472313140990616965871425187131346222779247232111250780,
                -43139019699327115711617780202783040092862808628341895782744823069479854552779,
                -107077420960787047367844643446953157544199051322244644306625049394723563232109,
                -16523082419060126492750584071126670442347370916635012443244906593568651897054],

               [-101695400669583813810746445139700392985776378025001584089118250770932796902963,
                -73764177157514071151095645437026121983640638485837445471844106164793206724452,
                -47612803961517067692539903164155489886296618497839475581217124605877787757262,
                -109689469928430497140731974242430685833999201365656390582176427565993107439052,
                -92925713401400710623839810079810339180963862369432977099052206202543808419600,
                -101695400669583813810746445139700392985776378025001584089118250770932796902963,
                -73764177157514071151095645437026121983640638485837445471844106164793206724452,
                -47612803961517067692539903164155489886296618497839475581217124605877787757262,
                -109689469928430497140731974242430685833999201365656390582176427565993107439052,
                -92925713401400710623839810079810339180963862369432977099052206202543808419600,
                -101695400669583813810746445139700392985776378025001584089118250770932796902963,
                -73764177157514071151095645437026121983640638485837445471844106164793206724452,
                -47612803961517067692539903164155489886296618497839475581217124605877787757262,
                -109689469928430497140731974242430685833999201365656390582176427565993107439052,
                -92925713401400710623839810079810339180963862369432977099052206202543808419600,
                -101695400669583813810746445139700392985776378025001584089118250770932796902963,
                -73764177157514071151095645437026121983640638485837445471844106164793206724452,
                -47612803961517067692539903164155489886296618497839475581217124605877787757262,
                -109689469928430497140731974242430685833999201365656390582176427565993107439052,
                -92925713401400710623839810079810339180963862369432977099052206202543808419600,
                -101695400669583813810746445139700392985776378025001584089118250770932796902963,
                -73764177157514071151095645437026121983640638485837445471844106164793206724452,
                -47612803961517067692539903164155489886296618497839475581217124605877787757262,
                -109689469928430497140731974242430685833999201365656390582176427565993107439052,
                -92925713401400710623839810079810339180963862369432977099052206202543808419600],

               [-63522566125187066556456764927373909912726211284218421011246448508692892873960,
                -2409208470116330926832310305110493054977239499386296942801684715449791849580,
                -113517673626352500141239206018899500102813717310384125436766574738317857361804,
                -37375605603684302646951325006261092494073445795806255322644516033219539977519,
                -114880691687877779925881942767867221717253840071213558427380246744809174194327,
                -63522566125187066556456764927373909912726211284218421011246448508692892873960,
                -2409208470116330926832310305110493054977239499386296942801684715449791849580,
                -113517673626352500141239206018899500102813717310384125436766574738317857361804,
                -37375605603684302646951325006261092494073445795806255322644516033219539977519,
                -114880691687877779925881942767867221717253840071213558427380246744809174194327,
                -63522566125187066556456764927373909912726211284218421011246448508692892873960,
                -2409208470116330926832310305110493054977239499386296942801684715449791849580,
                -113517673626352500141239206018899500102813717310384125436766574738317857361804,
                -37375605603684302646951325006261092494073445795806255322644516033219539977519,
                -114880691687877779925881942767867221717253840071213558427380246744809174194327,
                -63522566125187066556456764927373909912726211284218421011246448508692892873960,
                -2409208470116330926832310305110493054977239499386296942801684715449791849580,
                -113517673626352500141239206018899500102813717310384125436766574738317857361804,
                -37375605603684302646951325006261092494073445795806255322644516033219539977519,
                -114880691687877779925881942767867221717253840071213558427380246744809174194327,
                -63522566125187066556456764927373909912726211284218421011246448508692892873960,
                -2409208470116330926832310305110493054977239499386296942801684715449791849580,
                -113517673626352500141239206018899500102813717310384125436766574738317857361804,
                -37375605603684302646951325006261092494073445795806255322644516033219539977519,
                -114880691687877779925881942767867221717253840071213558427380246744809174194327],

               [-62312548736497453480832483456650982941473578796180777137784969230386548636384,
                -64054305960678500929777904083234938546857537972919801355215258591653013196366,
                -19835137876183337719973403408040362000981861846821393735688467352621159088162,
                -18746778741407973218597871561523148403714854963385195740040441598826397863844,
                -20201604210824322513505661740215815043165403993207115450011218751649201514849,
                -62312548736497453480832483456650982941473578796180777137784969230386548636384,
                -64054305960678500929777904083234938546857537972919801355215258591653013196366,
                -19835137876183337719973403408040362000981861846821393735688467352621159088162,
                -18746778741407973218597871561523148403714854963385195740040441598826397863844,
                -20201604210824322513505661740215815043165403993207115450011218751649201514849,
                -62312548736497453480832483456650982941473578796180777137784969230386548636384,
                -64054305960678500929777904083234938546857537972919801355215258591653013196366,
                -19835137876183337719973403408040362000981861846821393735688467352621159088162,
                -18746778741407973218597871561523148403714854963385195740040441598826397863844,
                -20201604210824322513505661740215815043165403993207115450011218751649201514849,
                -62312548736497453480832483456650982941473578796180777137784969230386548636384,
                -64054305960678500929777904083234938546857537972919801355215258591653013196366,
                -19835137876183337719973403408040362000981861846821393735688467352621159088162,
                -18746778741407973218597871561523148403714854963385195740040441598826397863844,
                -20201604210824322513505661740215815043165403993207115450011218751649201514849,
                -62312548736497453480832483456650982941473578796180777137784969230386548636384,
                -64054305960678500929777904083234938546857537972919801355215258591653013196366,
                -19835137876183337719973403408040362000981861846821393735688467352621159088162,
                -18746778741407973218597871561523148403714854963385195740040441598826397863844,
                -20201604210824322513505661740215815043165403993207115450011218751649201514849],
                
               [-29570929772973349417968750706070689975526920770033625399115048062619150985108,
                -96784599580189734353569887609390758722769477223581924642005694087560629449785,
                -21077299056370535147157222341468262036561137739159405038991391911128092007075,
                -69473945125418599488020607054720093749407458904586736888715945536961994897608,
                -18773976058461958245909423671154077797152685511502714027189255601719507000140,
                -29570929772973349417968750706070689975526920770033625399115048062619150985108,
                -96784599580189734353569887609390758722769477223581924642005694087560629449785,
                -21077299056370535147157222341468262036561137739159405038991391911128092007075,
                -69473945125418599488020607054720093749407458904586736888715945536961994897608,
                -18773976058461958245909423671154077797152685511502714027189255601719507000140,
                -29570929772973349417968750706070689975526920770033625399115048062619150985108,
                -96784599580189734353569887609390758722769477223581924642005694087560629449785,
                -21077299056370535147157222341468262036561137739159405038991391911128092007075,
                -69473945125418599488020607054720093749407458904586736888715945536961994897608,
                -18773976058461958245909423671154077797152685511502714027189255601719507000140,
                -29570929772973349417968750706070689975526920770033625399115048062619150985108,
                -96784599580189734353569887609390758722769477223581924642005694087560629449785,
                -21077299056370535147157222341468262036561137739159405038991391911128092007075,
                -69473945125418599488020607054720093749407458904586736888715945536961994897608,
                -18773976058461958245909423671154077797152685511502714027189255601719507000140,
                -29570929772973349417968750706070689975526920770033625399115048062619150985108,
                -96784599580189734353569887609390758722769477223581924642005694087560629449785,
                -21077299056370535147157222341468262036561137739159405038991391911128092007075,
                -69473945125418599488020607054720093749407458904586736888715945536961994897608,
                -18773976058461958245909423671154077797152685511502714027189255601719507000140]]
size_pd = 0
for k in range(USER_NUM):
    for m in range(TASK_NUM):
        size_pd += sys.getsizeof(perbed_data[k][m])
#服务器A的公私钥
public_key_A = System_Params.public_key_A
private_key_A = System_Params.private_key_A

#服务器B的公钥
public_key_B = System_Params.public_key_B
private_key_B = System_Params.private_key_B

#初始化的真值
X_star = [5500,125,175,65,2000,5500,125,175,65,2000,5500,125,175,65,2000,5500,125,175,65,2000,5500,125,175,65,2000]








'''---------------------------------函数部分------------------------------------'''
'''从A_DaSi_Data.txt中读取数据进行计算,写入B_XiaoYi_Data.txt中'''


#A使用自己的公钥加密扰动后的数据Step Ⅲ
def A_pai_enc_perbed_data():
    
    #此函数的功能是A使用自己的公钥加密所有用户的感知数据,然后将加密结果转换为字节流,写入B_DaSan_Data.txt中,运行一次函数进行写入
    
    #加密
    encrypted_perbed_data = []
    for k in range(USER_NUM):
        sub_list = []
        for m in range(TASK_NUM):
            sub_list.append(System_Params.Paillier_Encrypt(public_key_A,perbed_data[k][m]))
        encrypted_perbed_data.append(sub_list)
    return encrypted_perbed_data
    '''
    #将加密结果转换为字节序列,然后写入B_DaSan_Data.txt中
    serialized_encrypted_perbed_data = pickle.dumps(encrypted_perbed_data)
    with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\Infocom_17\code\B_DaSan_Data.txt","wb") as file:
        file.write(serialized_encrypted_perbed_data)
    '''
encrypted_perbed_data = A_pai_enc_perbed_data()

with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\Infocom_17\code\A_DaSi_Data.txt","rb") as file:
    serialized_encrypted_perb = file.read()
encrypted_perb = pickle.loads(serialized_encrypted_perb)
size_ep = 0
for k in range(USER_NUM):
    for m in range(TASK_NUM):
        size_ep += sys.getsizeof(encrypted_perb[k][m])

#Step ①,A从A_DaSi_Data.txt读取B公钥加密的扰动结果进行计算,然后将最终结果写入B_XiaoYi_Data.txt中
def weight_update_auxi():
    #该函数从A_DaSi_Data.txt中读取数据进行计算,写入B_XiaoYi_Data.txt中

    #从A_DaSi_Data.txt中读取加密的扰动
    with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\Infocom_17\code\A_DaSi_Data.txt","rb") as file:
        serialized_encrypted_perb = file.read()
    encrypted_perb = pickle.loads(serialized_encrypted_perb)

    #计算辅助距离
    perbed_dist = []      #(perbed_data - X_star)^2
    for k in range(USER_NUM):
        sub_list = []
        for m in range(TASK_NUM):
            sub_list.append((perbed_data[k][m] - X_star[m]) ** 2)
        perbed_dist.append(sub_list)

    pai_enc_perbed_dist = []
    for k in range(USER_NUM):
        sub_list = []
        for m in range(TASK_NUM):
            sub_list.append(System_Params.Paillier_Encrypt(public_key_B,perbed_dist[k][m]))
        pai_enc_perbed_dist.append(sub_list)

    C_k_conti = []       #所有用户的
    for k in range(USER_NUM):
        tmp_ccontik = 0
        for m in range(TASK_NUM):
            tmp = System_Params.homomorphic_add(pai_enc_perbed_dist[k][m],System_Params.cipher_exp(encrypted_perb[k][m],2 * (perbed_data[k][m] - X_star[m])))
            #t = time.perf_counter()
            tmp_ccontik = System_Params.homomorphic_add(tmp_ccontik,tmp)
            #print(f'cost: {time.perf_counter() - t:.8f}s')
        C_k_conti.append(tmp_ccontik)
    return C_k_conti
    '''
    #写入B_XiaoYi_Data.txt中
    Serialized_C_k_conti = pickle.dumps(C_k_conti)
    with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\Infocom_17\code\B_XiaoYi_Data.txt","wb") as file:
        file.write(Serialized_C_k_conti)
    '''
C_k_conti = weight_update_auxi()

#真值更新Step ④
with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\Infocom_17\code\weight_sum.txt","rb") as file:
    Serialized_weight_sum = file.read()
weight_sum = pickle.loads(Serialized_weight_sum)
def truth_update():

    #从A_XiaoSan_Data.txt读取加密数据并解密
    with open("F:\研究生论文资料\Code-用户任务扩充版本\experiment\Infocom_17\code\A_XiaoSan_Data.txt","rb") as file:
        Serialized_pai_enc_weighted_data = file.read()
    pai_enc_weighted_data = pickle.loads(Serialized_pai_enc_weighted_data)
    weighted_data = []              #m个任务的带权数据
    for m in range(TASK_NUM):
        weighted_data.append(System_Params.Paillier_Decrypt(private_key_A,pai_enc_weighted_data[m]))
    
    #更新真值
    Misssion_truth = []
    for m in range(TASK_NUM):
        tmp = weighted_data[m] / weight_sum
        Misssion_truth.append(tmp)
    print(Misssion_truth)


def main():
    t = time.perf_counter()
    A_pai_enc_perbed_data()
    weight_update_auxi()
    truth_update()
    print(size_pd+sys.getsizeof(encrypted_perbed_data)+size_ep+sys.getsizeof(C_k_conti)+sys.getsizeof(weight_sum))
    #print(f'cost: {time.perf_counter() - t:.8f}s')

main()